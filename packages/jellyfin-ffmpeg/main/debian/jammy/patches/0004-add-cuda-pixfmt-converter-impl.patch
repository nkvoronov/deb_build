Index: jellyfin-ffmpeg/libavfilter/dither_matrix.h
===================================================================
--- /dev/null
+++ jellyfin-ffmpeg/libavfilter/dither_matrix.h
@@ -0,0 +1,74 @@
+/*
+ * Dither matrix data
+ *
+ * This file is placed in the public domain.
+ */
+
+#include <stdint.h>
+static const int ff_fruit_dither_size = 64;
+static const uint16_t ff_fruit_dither_matrix[] = {
+	 332, 2776, 1933,   42, 2598, 1796, 1000, 2978, 1677, 3452, 2164, 1564, 2644,  358, 2012, 3471, 1147, 3071,  596, 1943, 3146, 1191, 2469,  919, 3664, 2359,  441, 2691, 1179, 3027, 1408,  298, 3892, 1825,  182, 2178, 3028,  317, 2412,  858, 3097, 2205, 1145, 2880,  990, 2697,  728, 1969, 2312, 1393, 3232, 1204, 3752, 1529,  448, 3955, 2076,  833, 3856,    1, 3445, 2105,  955, 1761,
+	4060, 1053, 3038, 1445, 3302,  430, 3702, 2119,  625, 2523,   12, 3003,  959, 3814, 2388,  829, 4059, 2236, 1417, 3447,  198, 4020, 1891, 3368,   76, 1460, 2963, 1680, 3721,  535, 2275, 2916, 1226, 2348, 3580,  823, 1897, 4032, 1245, 2728,  194, 3285, 1941,  399, 3639, 1593, 3775, 1038, 3012,  162, 2687, 2029,  559, 2983, 1809, 2378,  325, 2861, 1331, 2533, 1171, 2701, 3328,  153,
+	2214, 3412,  501, 3934,  892, 1918, 2686, 1199, 3090, 1351, 3779, 1776, 3371, 1457,  217, 2844, 1726,  311, 2896, 1021, 2604, 1546,  569, 2758, 1818, 3967,  727, 3305,  963, 1866, 3591,  853, 3215,  496, 2651, 1453, 2808,  704, 2247, 3395, 1779,  937, 4014, 2288, 1286, 3110,  331, 3309, 1839, 3866,  932, 3566, 2499, 1005, 3346, 1192, 3712, 1743, 3399,  757, 3765,  391, 1871, 2928,
+	1411,  820, 2531, 1622, 2192, 3478,  215, 4079,  384, 3298,  742, 2332,  436, 2685, 1963, 3273,  680, 3571, 2033, 3795,  806, 3550, 2319, 1225, 3191, 1027, 2506,  237, 2196, 3126,   28, 2148, 1772, 3959, 1009, 3507,   85, 3742, 1539,  453, 3647, 2154,  573, 2786,  156, 2020, 2569, 1425,  538, 2375, 1723,  300, 1854, 4065,  110, 2741,  678, 3138,  213, 1979, 2330, 1530, 3542,  720,
+	3811, 1955, 3240,  126, 2909,  760, 2482, 1493, 2301, 1719, 2788, 1180, 3998,  923, 3649, 1094, 1862, 2579, 1272,   30, 3109, 1987,  255, 3816,  471, 1977, 3519, 1557, 3882, 1086, 2754, 3776, 1304,  241, 2262, 1863, 3163, 1111, 2982, 2026, 1056, 2948, 1439, 3323, 1737, 3595,  860, 3980, 2895, 1193, 3365, 2779,  852, 2175, 3069, 1641, 2309, 1237, 2630, 4036,  965, 3052, 1096, 2487,
+	 289, 2863, 1190, 3633, 1330, 3834, 1075, 3429,  602, 3850,  174, 3242, 1657, 3080,   98, 2357, 3899,  374, 3224, 1619, 2431, 1125, 3019, 1367, 2395, 3102,  794, 2850,  426, 2451, 1687,  548, 3070, 2596, 3335,  565, 1630, 2459,  288, 3937, 2504,   51, 3740,  725, 2475,  433, 2706, 2075,   19, 3694,  633, 1982, 3149, 1345,  729, 3843,  411, 3654, 1681,  564, 2721,  104, 3875, 2110,
+	3504, 1730,  537, 2398, 2058,  443, 2636, 1802, 2925,  953, 2568, 2005,  583, 2108, 2802, 1441,  889, 2726, 1949, 3984,  486, 3407,  624, 2698, 1648,   97, 4055, 1340, 1994, 3667,  913, 3453, 1964,  815, 1400, 4072, 2767,  873, 3457,  684, 1576, 3119, 1884, 1222, 3898, 1535, 3482,  982, 1817, 2520, 1487, 3927,  181, 3493, 2396, 1438, 2871,  985, 2070, 3498, 1370, 3279, 1655,  586,
+	1280, 2625, 3912,  939, 2999, 1649, 3162,   64, 2130, 3606, 1428, 3469, 1256, 3824,  409, 3562, 1780, 3433,  768, 1206, 2843, 2086, 3869,  926, 3663, 2099, 1047, 2623, 3217,  148, 1810, 2498,  314, 3790, 2126,  129, 2037, 3088, 1356, 2314, 3301,  946, 2716, 2163,  250, 3091,  575, 2227, 3204,  359, 2970, 1110, 2594, 1867,  532, 3338,   43, 2492, 3172,  282, 2394,  842, 2852, 2019,
+	3111,   31, 1813, 3256,  243, 3687,  851, 4002, 1301,  480, 3004,  264, 2493, 1586, 2947,  714, 2538,  165, 2193, 3597, 1514,  130, 1792, 3132,  348, 2875, 3434,  491, 1251, 2120, 3979, 1093, 2905,  979, 2561, 3625, 1230,  373, 3836, 1953,  197, 4028,  498, 3383, 1713, 2400, 1402, 4083, 1150, 3589, 2106,  592, 3650, 1252, 4012, 1975, 3047, 1574,  690, 3909, 1745, 3616,  349, 3976,
+	 894, 3438, 2251, 1160, 2582, 1467, 2342, 1747, 2837, 2242, 1076, 3946,  866, 3385, 1108, 1985, 4076, 1303, 2915,  438, 2589, 3312, 1085, 2367, 1916, 1403,  759, 2340, 3582, 2835,  637, 3264, 1997, 3506,  515, 1544, 3258, 2612, 1017, 2903, 1322, 1791, 3014, 1154, 3826,  871, 2858,  192, 2739,  719, 1701, 3177, 2222,  345, 2737,  770, 1181, 3774, 2264, 1060, 2667, 1262, 2318, 1584,
+	2654, 1420,  499, 4045,  688, 3379,  319, 3490,  735, 3699, 1642, 2050, 2683,   40, 2204, 3096,  343, 3261, 1672, 3747,  900, 1981, 4025,  644, 3505, 2575, 3903, 1724,  232, 1517, 2590, 1405,   58, 1663, 3051, 2381,  751, 1756, 3646,  647, 3464, 2363,  826, 2563,   92, 3137, 1928, 3524, 1590, 2159, 3851,   84, 1423, 3082, 1684, 2417, 3417,  369, 1808, 3022,  118, 3254,  661, 3555,
+	 229, 3756, 2917, 1627, 2773, 1235, 2949, 1002, 2470,  140, 3274,  594, 3533, 1678, 3799,  933, 1812, 2457,  673, 2306, 1474, 3055,  292, 2820, 1293,    2, 1106, 3237, 2013, 3823,  439, 3611, 2093, 4015, 1264,  258, 3914, 2294,   16, 2692, 1983,  295, 3723, 1893, 3442, 1306,  619, 2371,  392, 2989, 1071, 2484, 3512,  666, 3796,  195, 1522, 2775, 3586,  875, 4086, 1921, 2883, 1163,
+	2456, 1935, 1032, 2305,  111, 3845, 2036, 1555, 3964, 2115, 1289, 2911,  977, 2372,  465, 2616, 3618, 1211, 3933,   72, 3404,  772, 2424, 1662, 3755, 2252, 3025,  518, 2524,  855, 2953, 1102, 2811,  795, 2602, 3414, 2060,  891, 3357, 1132, 3965, 1495, 2806,  551, 1633, 2629, 3659, 1172, 3958, 1446, 3319,  798, 1787, 2768, 1271, 3184, 2210,  587, 1338, 2478, 1550,  483, 2198, 3388,
+	 832, 3219,  386, 3674, 1733, 2479,  578, 3214,  416, 3044, 1861,  291, 4033, 1449, 3477, 1940,  205, 2976,  885, 2704, 1886, 3820, 1070, 3288,  700, 1369, 1855, 4087, 1194, 3463, 1764, 2329,  297, 3296, 1742,  539, 1398, 3107, 1696, 2387,  711, 3151, 1223, 2219, 4038,  328, 2095, 2919,  845, 2595,  263, 2235, 4043,  398, 2129,  903, 3924, 1885, 3317,  249, 2732, 3685, 1383,   55,
+	3926, 1481, 2977, 1177, 3292,  893, 3600, 1418, 2670,  927, 3637, 2477, 1127, 2665,  765, 2879, 1283, 2162, 3333, 1359,  482, 2180, 2942,  219, 2548, 3594,  308, 2759, 2185,  106, 3174,  699, 3738, 1139, 2277, 3833, 2804,  223, 3707,  415, 3518, 1913,  150, 2995,  864, 3222, 1575,   35, 3428, 1694, 3581,  992, 2907, 1494, 3676, 2702,   11, 3103,  849, 3825, 1848,  947, 3125, 1901,
+	2494,  600, 2017, 2658,  293, 2207, 2851,    9, 1799, 3186,  510, 2077, 3318,  102, 3196, 1571, 3982,  357, 1781, 3717, 2774, 1176, 1834, 4001,  908, 2044, 3195,  986, 1675, 3696, 1339, 2638, 1617, 3026,   96, 1984,  940, 2446, 1563, 2876,  930, 2532, 3426, 1516, 2407, 1134, 3801, 1931, 2307,  521, 2744, 1883,  138, 3356,  597, 1758, 2343, 1389, 2831, 2145,  693, 3485, 2286,  520,
+	3031, 1601, 3710,  956, 4067, 1849, 1097, 3760, 2406, 1215, 3861, 1596,  846, 3804, 1890,  516, 2295, 3062,  747, 2337,  169, 3178,  603, 2269, 3104, 1537,  627, 3537, 2415,  786, 2988,  379, 4040,  839, 2554, 3561, 1363, 4005,  745, 2128, 3817, 1348,  617, 3910,  397, 3050,  598, 2787, 1037, 3932, 1277, 3741, 2091, 1073, 2503, 3530,  934, 4024,  352, 1610, 2969,  158, 1347, 3992,
+	1155, 3348,  142, 2259, 3087,  500, 3380, 2096,  730, 2795,  210, 3005, 2335, 1173, 2627, 3703, 1049, 2038, 3514,  983, 3868, 1653, 3552, 1249,   74, 3891, 2586, 1452,  238, 3936, 1738, 2168, 1209, 3384, 1847,  593, 3233,  355, 3036, 1753,   63, 3250, 2150, 1732, 2613, 1259, 3629, 1483, 3120,  280, 2382,  663, 2641, 3176, 1637,  265, 3013, 1239, 2420, 3416, 1088, 3769, 1938, 2555,
+	 347, 2049, 2809, 1443,  761, 2628, 1693,  277, 3975, 1496, 3523, 1961,  547, 3106,  287, 1492, 3340,   24, 1547, 2887, 2147,  370, 2535, 1880, 2962, 2121,  479, 3077, 1922, 2618,  966, 3253, 2439,  327, 2847, 1515, 2226, 2713,  962, 3632, 2465, 1039, 2854,  245, 3179, 2080,  124, 2525,  792, 3486, 1744, 3289, 1404,  476, 3782, 2186,  715, 3579, 1971,  626, 2784, 2201,  741, 3248,
+	1640, 3551, 1024, 3840, 1827, 3622, 1072, 3238, 2279,  835, 2562, 1295, 4085, 1816, 3535, 2495,  724, 2664, 4042,  570, 1281, 3422, 1013, 3787,  783, 1343, 3722, 1123, 3427,  599, 3634,   27, 1572, 3827, 1014, 3665,  139, 1868, 3197, 1390,  640, 4090, 1459, 3714,  902, 3421, 1676, 4004, 2246, 1128, 2720,   60, 4069, 2002, 1035, 2818, 1352, 2552,   88, 3847, 1801,  309, 3627, 1104,
+	2894,  686, 2509,  403, 2926,   95, 1991, 2868,  469, 2052, 3370,   66, 2399,  679, 1248, 2081, 3181, 1100, 2224, 1870, 3001, 1506, 2760,  260, 3294, 2707, 2027,  146, 2355, 1323, 2783, 1956, 2946,  676, 2000, 3053, 1325, 3893,  424, 2084, 2998, 1797,  466, 2380, 1875,  507, 2939, 1054,  396, 3700, 1502, 3007,  904, 2418, 3443,  200, 3954, 1588, 3283, 1065, 3084, 1471, 2714, 2270,
+	  34, 4029, 1869, 3446, 1207, 2442, 3919,  879, 1788, 3726, 1115, 3129, 1466, 2742, 3897,  214, 1750, 3763,  405, 3459,  123, 3916,  812, 2317, 1685,  533, 3389, 1589, 3908, 1844,  376, 3990, 1158, 3437, 2377,  458, 2645,  896, 2336, 3396,  193, 2581, 3539, 1083, 2756, 3871, 1426, 2135, 3166, 1824,  566, 2104, 3559,  413, 1814, 2922, 2122,  797, 2750, 2258,  670, 3944,  869, 1729,
+	3183, 1409,  916, 2220, 3100,  568, 1427, 3351, 2601,  336, 2803,  778, 3656,  432, 2170, 3330,  944, 2302, 2856,  970, 2416, 1766, 3249, 1218, 4066, 2438,  993, 2635,  697, 3021, 2152,  830, 2608,  234, 1421, 4051, 1705, 3577, 1507,  791, 3807,  958, 2051, 3148,    4, 2256,  712, 3529,  179, 2536, 3880,  989, 2655, 1302, 3267,  562, 1210, 3517,  303, 1950, 3393,  168, 2125, 3749,
+	 502, 2745, 3648,  256, 1620, 3684, 2240,  173, 1238, 3999, 2216, 1704, 2039, 2886, 1213, 1889, 2980,  665, 1585, 3715, 1333, 2662,  446, 3011,   41, 1906, 3772,  306, 3509, 1241, 3339, 1645, 3692, 2209, 3121,  607, 2833,   47, 3185, 2507, 1291, 2859,  400, 1580, 3675, 1328, 2676, 1658, 2857, 1183, 1965, 3190,  149, 3972, 1573, 2221, 3832, 1706, 3037, 1290, 2534, 1647, 2923, 1161,
+	2452, 1942,  809, 3321, 2139, 1022, 2842, 1887, 3074, 1528,  536, 3475,  188, 3837,  752, 3573,   79, 4018, 2141,  285, 3354,  738, 3680, 2173, 1473, 2927, 1144, 2816,  877, 2368,   91, 2727,  635, 1253, 1888, 3513,  974, 2280, 1990,  488, 3326, 1948, 4007, 2153,  660, 3314,  302, 4039,  784, 3626,  445, 2327, 1674, 2513,  827, 3099,   26, 2464,  749, 4095,  912, 3704,  556, 3495,
+	 225, 3962, 1567, 2550,  713, 4053,  371, 3436,  796, 2541, 3169, 1174, 2428, 1414, 2609, 1628, 2753, 1263, 3206, 1951, 1129, 2885, 1740,  911, 3376,  672, 3603, 1616, 2015, 3873, 1477, 3543, 2087, 3846,  171, 2549, 1612, 3730, 1157, 3923, 1650,  151, 1136, 3033, 2466,  996, 2931, 1450, 2391, 1763, 3362,  883, 3678,  333, 3496, 1422, 2730, 1084, 3225,  375, 2780, 1480, 2354, 1882,
+	2961, 1028, 2814,   80, 3154, 1720, 2463, 1444, 3733,   23, 1666, 3917,  611, 3398,  388, 3235,  696, 2344,  425, 2580, 3839,  154, 2266, 3957,  381, 2056, 2476,  196, 3180,  527, 3009, 1044,  383, 2347, 2973,  781, 3227,  342, 2766,  654, 2967, 2101, 3546,  457, 1534, 3732, 1917,  616, 3134,   52, 2174, 2981, 1169, 2813, 2116,  541, 3781, 2156, 1448, 3578, 2199,   87, 3359, 1313,
+	 618, 3424, 1397, 3818, 2098, 1095, 2943,  961, 2316, 1959, 2975, 1026, 2724, 1768, 2155, 1153, 3945, 1751, 3612,  814, 1551, 3304, 1178, 2764, 1643, 3136, 1081, 3981, 2213, 1310, 2587, 1826, 3369, 1533, 1092, 3953, 1296, 2433, 1833, 3598, 1023, 2543, 1309, 3187, 2043,  125, 2519, 3528, 1324, 3757, 1511,  492, 4057, 1910,  994, 3200, 1777,  212, 2960,  702, 1811, 3122,  943, 3925,
+	2611, 2046,  477, 2397,  650, 3541,  235, 3864,  632, 3342,  423, 2234, 3592,  109, 3758, 2933,  239, 2790, 1051, 2985, 2113,  630, 2515,  257, 3778,  843, 2708, 1549,  653, 3521,  233, 4058,  748, 3086, 2231,  484, 2062, 3075,  115, 1501, 3287,  334, 3885,  856, 2763, 3971, 1195,  414, 2822,  681, 2700, 1830, 2422,  112, 3556, 2267,  901, 3983, 2373, 1217, 3770,  454, 2481, 1845,
+	 266, 3662, 1654, 3208, 1287, 1934, 3060, 1807, 2648, 1395, 4074,  828, 1531, 2640, 1350,  872, 2454, 1512, 3499,    8, 4092, 1762, 3540, 1434, 2146, 3286,   71, 3683, 1902, 2421, 1385, 2719, 1972,   13, 3660, 1688, 3450, 1001, 4077, 2328,  907, 2913, 1690, 2353,  545, 1485, 2991, 2134, 1728, 3948,  938, 3353, 1298, 2891, 1592,  387, 3029, 1896,  524, 3378, 2092, 1560, 2972, 1089,
+	3150,  882, 2672,  183, 3693, 2572,  506, 1109, 3218,  164, 2467, 1930, 3175,  706, 3480, 2111, 3831,  584, 2211, 2679, 1292, 2819,  442, 2935,  601, 1790, 2496, 1041, 2906,  435, 3230,  880, 3780, 2512,  909, 2770,  301, 2657, 1914,  508, 3754, 2079,   39, 3698, 1879, 3455,  800, 3322,  159, 2225, 3046,  304, 3621,  615, 3870, 2567, 1077, 3651, 1484, 2749,  190, 4008,  606, 3564,
+	2203, 1410, 4046, 1988,  837, 1468, 3978, 2260, 1638, 3764,  929, 3547,  322, 1819, 2855,  394, 1416, 3006, 1702,  785, 3262,  960, 2249, 3624, 1224, 4023,  790, 3432, 1254, 3939, 1621, 2283,  531, 1519, 3394, 1258, 3819,  756, 3244, 1609, 2583, 1294, 3141, 1052, 2674,  261, 2427, 1553, 3653, 1165, 1962, 2606, 1040, 2320, 1937, 1284, 3160,   56, 2237,  920, 3194, 1372, 2401, 1952,
+	   0, 2901,  689, 2338, 3352, 2840,   73, 3405,  739, 2054, 2959, 1377, 2202, 3941, 1067, 2021, 3306,  167, 3905, 2042,  307, 3792, 1860,  144, 2615, 1978, 3064,  278, 1945, 2383,  119, 3544, 1874, 3131,  203, 2187, 1767, 2462, 1229, 3585,  364, 2798,  683, 3503, 1412, 4049,  921, 2762,  447, 3144,  733, 3797, 1489, 2986,  231, 3474,  780, 2793, 3935, 1670, 2526,  367, 3315,  841,
+	3855, 1734, 3489,  305, 1240, 1836, 2195, 1011, 3078,  390, 2556,  642, 3209,   44, 2743, 3679,  917, 2695, 1133, 3400, 2436, 1098, 3056, 1415, 3277,  487, 1568, 2643, 3670,  925, 3101, 1034, 2747, 1167, 4030, 2848,  580, 3094,   99, 2287, 1031, 3989, 1968, 2379,  514, 2053, 3092, 1234, 3894, 1623, 2472,   14, 3259,  822, 3968, 2248, 1401, 2040,  449, 3269,  766, 3706, 1603, 2944,
+	1250, 2650, 1015, 2537, 3943,  579, 3630, 2593, 1274, 3467, 1583, 3829, 1162, 2471, 1543,  553, 2365, 1613, 3072,  677, 1748, 2752,  528, 3929,  906, 2321, 3810, 1288,  628, 2829, 2094, 3852,  401, 2392,  773, 1591, 3468, 1424, 3881, 1789, 3331, 1520,  172, 3220, 1636, 3596,   89, 1924, 2284, 1003, 3435, 1739, 2124, 2778, 1806,  517, 2621, 3403, 1205, 1829, 2869, 1062, 2293,  244,
+	3608,  431, 3246, 1379, 2123, 2937, 1532,  296, 3922, 1865,  177, 2143, 2974,  427, 4011, 1912, 3576,  326, 2109, 4031,   75, 3655, 2206, 1541, 2048, 3401,   33, 2161, 3364, 1476,  254, 1691, 3337, 1375, 3605, 2055,  362, 2738,  716, 2634,  450, 2212, 3777, 1187, 2870,  863, 2485, 3363,  337, 3008,  634, 4063,  452, 1268, 3313, 1112, 3727,  253, 2228, 3798,  103, 1974, 4075, 1406,
+	2430, 2061,  776, 3720,  152, 1114, 3293, 2325,  840, 2660, 3272,  988, 1725, 3366, 1305, 3020,  968, 3228,  799, 2544, 1840, 1016, 3170,  259, 2873,  777, 1838, 3142,  455, 3985, 2010, 2993,  646, 2689,   45, 2547, 3745, 1137, 3212, 1317, 3023,  825, 2566,  410, 2127, 3931, 1538,  775, 3812, 1785, 2757, 1368, 2542, 3584,  127, 3041, 2011, 1548, 2940,  723, 2490, 3307,  530, 2789,
+	 948, 3123, 1579, 2777, 2035, 3848,  542, 1946, 3057, 1433,  558, 3731, 2600,  755, 2326,  108, 2785, 1380, 3750, 1276, 3451, 2063,  737, 3567, 1247, 4062, 2671,  884, 2411, 1126, 2588,  952, 3794, 1858, 3161,  924, 1804, 2333,  218, 3974, 1679, 3456, 1394, 3572, 1757,  211, 3205, 2659, 1242, 2346,  176, 3140,  850, 2188, 1716, 2460,  560, 4019,  997, 3522, 1735, 1105, 3048, 1661,
+	3773,   61, 3548,  609, 1273, 2553, 1682, 3609,   25, 4056, 1898, 2233,  224, 3604, 1107, 3802, 1673, 2410,  246, 2849,  459, 3066, 2578, 1625, 2425,  368, 1463, 3734, 1671, 3510,  107, 3257, 1341,  460, 2239, 3947,  550, 3441, 1993,  971, 2408,   20, 2765, 1061, 2952, 2292, 1371,  434, 3642,  972, 3460, 1659, 3736,  330, 3904,  888, 3276, 1362, 2735,  356, 2281, 3901,  227, 2171,
+	 805, 2528, 1774, 2183, 3165,  267, 2860, 1008, 2461, 1285, 2834,  935, 3081, 1509, 2694, 2073,  671, 3168, 1939, 1141, 3969, 1429,  133, 3815,  973, 3231, 2085,  201, 2918,  698, 2781, 1644, 2311, 3387, 1057, 1561, 2821, 1216, 2599, 3355,  701, 3791, 1892,  481, 4091,  651, 3310, 2191, 1700, 2899,  707, 2448, 1312, 2668, 1454, 2792, 2107,   36, 2030, 3234, 1465,  865, 2597, 3484,
+	1518, 4000,  429, 3415,  870, 3949, 1503, 3492,  721, 3372,  361, 3789, 1831,  529, 3487,  320, 4081, 1012, 3607, 2250,  629, 2169, 3347, 1976, 2997,  722, 3620, 2351, 1200, 3889, 2144,  810, 4082,  236, 2023, 3515,  117, 3709,  444, 1835, 2845, 1299, 3198, 2140, 1510, 2546,  887, 3857,   49, 2009, 3994,  404, 3035, 1048, 3410,  461, 3668, 1618, 3828,  590, 2807, 3613, 1354,  620,
+	3157, 1152, 2867, 1297, 2711, 2265,  490, 2131, 2955, 1712, 2350, 1214, 3203, 2179, 1069, 2577, 1857, 2924,   17, 2699, 1692, 2950, 1197,  485, 1582, 2740, 1407,  544, 3278, 1784,  382, 2941, 1208, 2510, 3063,  844, 2722, 2215, 1595, 4026,  226, 2370,  743, 3681,  145, 3465, 2068, 2782, 1392, 3153, 1006, 2255, 3638,  105, 1821, 2517,  813, 2920, 1189, 2409, 1967,  122, 3058, 2067,
+	2403,  252, 1980, 3686,  116, 1652, 3746, 1337,  204, 3970,  669, 2715,   82, 3895, 1635, 3409,  763, 1526, 3502,  967, 3719,  268, 3900, 2393, 3558,   62, 3991, 1973, 2540,  987, 3716, 1909, 3327,  554, 1615, 3761, 1366,  595, 3300,  876, 3116, 1138, 2893, 1342, 2678, 1754,  378, 1079, 3563,  525, 2733, 1853, 1143, 2112, 4073, 1228, 3360, 1904,  377, 3391, 1042, 4050, 1721,  478,
+	3860, 1624, 3270,  936, 2088, 2929,  610, 3145, 2444, 1486, 3534, 2007, 2996,  808, 2402,  199, 2828, 2100,  505, 3127, 1435, 2558, 2003,  613, 1852, 2633, 1117, 3164,  271, 3476, 2271,    3, 1469, 3853, 2362,  340, 2898, 1878, 2570, 1462, 2166, 3872,  335, 3367,  639, 3988, 2964, 1908, 2374, 1577, 3835,  281, 3481, 2839,  582, 3018,  187, 2276, 3928, 1597, 2652,  831, 2557, 3425,
+	1119, 2836,  561, 2514, 4088, 1064, 3458, 1957,  886, 2841,  341, 1101, 1683, 3236, 1365, 3617, 1033, 3921, 2447, 1846,  750, 3402, 1087, 3065, 1308, 3439,  705, 1752, 2872, 1374,  848, 3207, 2637, 1030, 2065, 3462,  910, 3911,   57, 3623,  534, 1894, 2559, 1611, 2297, 1413,  746, 3783,  175, 3211,  905, 2527,  754, 1464, 2369, 1665, 3751, 1396,  652, 3040,  272, 3266, 1307, 2102,
+	  15, 2274, 3526, 1432,  350, 1795, 2565,   48, 3883, 1269, 3411, 2136, 4027,  310, 2626,  645, 3113, 1311,  290, 3784, 2680,  113, 2268, 4068,  339, 1947, 2468, 3830,  526, 2078, 3950, 1711,  636, 3049,  166, 1731, 3108, 1184, 1999, 2669, 1349, 3500,  890, 3711,   78, 3290, 2502, 1201, 2853, 2184, 1357, 3303, 1926, 3884,  313, 2675,  789, 3171, 2437, 1265, 3718, 1920,  608, 2951,
+	3766, 1569,  857, 2897, 2118, 3645,  762, 3182, 1629, 2360,  703, 2900,  954, 1876, 3759, 1488, 2289, 1911, 2956,  981, 1664, 3644,  918, 1562, 2904, 3661,  147, 1475, 3311, 2649,  230, 2245, 3636, 1386, 4022, 2603,  509, 2376, 3345,  847, 3059,  208, 2866, 1186, 2646, 1703,  366, 3392, 1823,  540, 4017,    6, 2987,  991, 3375, 1159, 3601, 2066,   68, 2772,  767, 2322, 3587, 1399,
+	 519, 2181, 3879,  161, 3229, 1149, 2032, 2656,  417, 3767, 2018,  134, 3549, 2223,  552, 3284,   59, 3987,  589, 3444, 2339,  422, 2805, 2151,  563, 1196, 3199, 2345,  874, 1300, 3531, 1142, 2746,  372, 2182,  821, 3744, 1631,  269, 4070, 1587, 2405, 1782, 3887,  674, 3560, 2071,  942, 3669, 1513, 2571, 2089,  691, 2453, 1877, 2874,  468, 1717, 3525, 1430, 3960, 1626,  207, 2734,
+	1832, 3000, 1203, 2585, 1749,  463, 3986, 1355, 3349,  975, 3054, 1604, 2607, 1182, 2938, 1698, 2574, 1227, 2794, 2069, 1146, 3260, 1316, 3876, 1794, 2681, 1996,  473, 3993, 1936, 3032,  567, 2001, 3397, 1478, 3252, 1148, 2954, 1929, 2272,  623, 3167,  420, 2158, 2930, 1121, 3085, 2441,  221, 2892, 1082, 3610, 1602, 3803,  157, 1523, 4044, 2285, 1043, 2912,  456, 2516, 3454,  978,
+	4037,  315, 3361,  622, 3691, 2194, 2984,  189, 1815, 2530,  497, 3271,  740, 3859,  270, 3671,  834, 3511, 1771,  186, 3743,  718, 3015,   29, 3373,  819, 3762, 1578, 2755,   77, 2414, 1634, 3915,  881, 2826,   94, 2560,  467, 3520, 1260, 3724, 1360, 3473, 1498,  163, 4009,  555, 1851, 3800,  787, 3251,  299, 3039, 1232, 3268, 2229,  662, 3002,  242, 1899, 3295, 1198, 1989, 3159,
+	 709, 2443, 2041, 1525, 2666, 1275,  859, 2090, 3557, 1116, 4054, 1437, 2404, 1944, 2810, 1068, 2352,  385, 3156, 2450, 1472, 2639, 1710, 2366, 1140, 2884,  262, 3239,  964, 3690,  807, 3135,  251, 2384, 1699, 3865, 1318, 3098,  779, 2486,   18, 2631,  914, 2799, 1919, 2364, 1566, 3334, 1255, 2304, 1656, 2688, 2047,  574, 2653, 1091, 3408, 1332, 3844, 2445,  631, 3737,   93, 2290,
+	1646, 3672, 1046, 3508,   70, 3886, 2419, 3213,  346, 2815, 2138,    5, 3430,  614, 1479, 3374, 1651, 4064, 1353,  771, 3888,  344, 3545,  667, 4035, 1859, 2497, 1320, 2300, 1765, 2632, 1436, 3658, 1118, 3350,  731, 2315, 1843, 3956, 1010, 3316, 2082, 3918,  472, 3640,  744, 2690,   65, 2823,  428, 4078,  854, 3570, 1458, 3952,  354, 2014, 2624,  836, 1497, 3042, 1709, 2771, 1103,
+	2990,  228, 2862,  811, 3189, 1736,  512, 1482, 3809,  710, 1773, 3034, 1346, 3951, 2291,  141, 2890,  585, 2696, 2022, 2910, 1055, 2197, 3139, 1382,  489, 3635,  621, 3461,  220, 4080,  546, 1881, 2958,  412, 1998, 3588,  184, 1455, 2761, 1605,  717, 1778, 3188, 1170, 3030, 1391, 3862, 1905, 3423, 1063, 2505,  101, 1932, 2429, 1267, 3701,   37, 3488, 2083,  294, 4013,  803, 3470,
+	1387, 3907, 1793, 2324, 1244, 2800, 2006, 3068,  980, 2385, 3628, 1050, 2729,  380, 1798, 3739,  928, 2232, 3413,   81, 1669, 3329, 1524,  216, 2703, 2097, 2936, 1639, 2045, 2712, 1344, 2167, 3494, 1019, 2458, 3158, 1168, 2592, 3448,  440, 3788, 2945,  202, 2474, 1995,  321, 3501, 1018,  577, 2176, 3083, 1373, 2865, 3344,  513, 3093, 1600, 2832, 1099, 3143, 2303, 1025, 2622,  363,
+	2263,  668, 2717,  395, 4071,  659, 3673,  137, 2682, 1660,  275, 3210,  824, 2423, 3308, 1270, 3095, 1856, 1221, 3652, 2529,  576, 3961, 1895, 3735, 1124,   90, 3890,  941, 3255,  817, 2881,   32, 2731, 1715,  312, 4047,  649, 1986, 2358, 1246, 1927, 3574,  838, 4048, 2341, 1722, 2610, 3247, 1556,  276, 3677,  643, 1164, 3806, 2261,  774, 1903, 3913,  641, 1461, 3282, 1769, 3657,
+	1614, 3325, 1175, 3133, 1565, 2483, 1113, 3297, 1319, 4003, 2241, 1236, 3838, 1606,  655, 2751,  248, 3920,  464, 2149,  950, 3045, 1261, 2825,  736, 2432, 3358, 1442, 2511,  323, 3725, 1527, 3940,  862, 3602, 2257, 1581, 2797,  998, 3147,  284, 2705, 1045, 2889, 1504,  648, 3073,  185, 1243, 3902, 2310, 1746, 2117, 2710, 1521,  180, 3516, 2647,  318, 2489, 3682,  143, 2908,  732,
+	2508,   22, 3822, 1954,  222, 3483, 2137,  474, 2902,  588, 3114, 2034,  114, 2882, 3666, 1822, 1059, 2323, 3216, 1329, 3805,  155, 2298,  402, 3128, 1540, 2177,  656, 3061, 1800, 2313,  523, 1915, 3089, 1376,  694, 3281,   83, 3688, 1727, 3966, 1451, 3265,   50, 2064, 3697, 1335, 3449, 2028,  758, 2791,  949, 3996,  351, 3241, 2172, 1805,  995, 3079, 1131, 1872, 2389, 1220, 3973,
+	1336, 2838,  931, 2361, 2992,  788, 1714, 3878, 2208, 1842,  976, 3532, 1358, 2103,  475, 2230, 3491, 1558,  734, 2817, 1741, 3431, 1384, 3705,  899, 3565,  274, 3997, 1166, 3538,  922, 3390, 2614,  209, 2390, 3877, 1188, 3010, 2157,  801, 2500,  522, 2218, 3849, 2539,  470, 2723,  897, 2473, 3614,   21, 3386, 1447, 3016,  895, 3874,  504, 3619, 1542, 4089,  692, 3440, 2057,  493,
+	3245, 1759, 3615,  543, 1491, 3768, 2576, 1266,   46, 3643, 2545,  353, 2661, 4094, 1135, 2932,   38, 2564, 4010,  286, 2386,  802, 2684, 1770, 2522, 1321, 2914, 1689, 2673,  121, 2888, 1755, 1212, 3466, 1992,  462, 2605, 1864,  360, 3299, 1219, 3527, 1667,  685, 1185, 3223, 1966, 4006,  418, 1594, 3112, 2253,  591, 1900, 2449, 1364, 2864, 1970,   67, 2254, 2827,  329, 2971, 1058,
+	2296,  283, 2617, 1873, 3152, 1120,  389, 3263, 2725, 1552,  726, 3226, 1686,  604, 3280, 1500, 3695,  999, 2025, 3192, 1078, 2979,  451, 4061,   10, 3221,  753, 2331,  984, 3842, 2160,  407, 4021,  878, 2966, 1545, 3536,  945, 3813, 1599, 2748,  178, 3118, 2008, 3631, 1608,  136, 1419, 2934, 2189,  682, 1326, 3729, 2736,  131, 3420,  818, 2521, 3320,  898, 1668, 3841, 1431, 3713,
+	1536, 3406, 1007, 4034,  128, 2244, 3575, 2016,  951, 3930, 2299, 1020, 3748, 2435, 1925,  324, 2200, 3043,  571, 1775, 3785, 1456, 3275, 1151, 2165, 1803, 3793,  316, 3291, 1923, 1090, 3076, 2426, 1841,  612, 3201,  160, 2278, 2830,  549, 2132, 4093,  867, 2591,  365, 2769, 2114, 3553, 1004, 3821, 1828, 3336,  338, 1607, 4041, 1202, 3067,  419, 1327, 3583, 2190,  793, 2677,  100,
+	2480,  764, 2921, 2133, 1282, 2801, 1388,  657, 3173,  279, 1820, 2965,  132, 1231, 2812, 3938,  861, 1440, 3590, 2663,  120, 2282,  675, 2620, 3554,  969, 2488, 1598, 2824,  495, 3641, 1505,   54, 3771, 2243, 1381, 3977, 1960, 1279, 3569, 1036, 1786, 2994, 1378, 3906, 1074, 3343,  572, 2518,  206, 2877,  868, 2413, 3155,  581, 2308, 1697, 3808, 2024, 2718,  240, 3202, 1233, 3497,
+	1718, 3863,  406, 1632, 3381,  511, 3963, 2440, 1470, 2619, 3341, 1315, 2217, 3593,  557, 1760, 3324, 2501,  408, 1314, 3479, 1708, 3896, 1554,  247, 3017,  638, 3418, 1334, 2455,  816, 3377, 2142, 1029, 2878,  437, 2551,  687, 2957,    7, 2491, 3332,  273, 2334,  782, 2968, 1783, 1278, 3124, 2074, 1490, 3942, 2004, 1066, 1907, 3568,  191, 2796,  605, 1122, 3995, 1850, 2273,  695,
+	3130, 1156, 2356, 3728,  915, 3105, 2059,  170, 3753, 1080,  503, 4016,  804, 3115, 1361, 2693,   86, 1837, 3854, 2349,  769, 2846,  393, 3117, 2072, 1257, 3867, 2031,  135, 4084, 1958, 2709,  708, 3243, 1570, 3708, 1130, 3419, 1695, 3858, 1508,  658, 3786, 1707, 3472,   69, 2434, 4052,  421, 3599,  664, 2573,   53, 3382, 2642,  957, 3193, 1499, 2238, 3024, 1559,  494, 3689, 2584,
+};
Index: jellyfin-ffmpeg/libavfilter/vf_scale_cuda.c
===================================================================
--- jellyfin-ffmpeg.orig/libavfilter/vf_scale_cuda.c
+++ jellyfin-ffmpeg/libavfilter/vf_scale_cuda.c
@@ -1,5 +1,8 @@
 /*
 * Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.
+* Copyright (c) 2019 rcombs
+*
+* This file is part of FFmpeg.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
@@ -20,10 +23,10 @@
 * DEALINGS IN THE SOFTWARE.
 */
 
-#include <float.h>
 #include <stdio.h>
 #include <string.h>
 
+#include "libavutil/avassert.h"
 #include "libavutil/avstring.h"
 #include "libavutil/common.h"
 #include "libavutil/hwcontext.h"
@@ -34,13 +37,13 @@
 #include "libavutil/pixdesc.h"
 
 #include "avfilter.h"
+#include "dither_matrix.h"
 #include "formats.h"
 #include "internal.h"
 #include "scale_eval.h"
 #include "video.h"
 
 #include "cuda/load_helper.h"
-#include "vf_scale_cuda.h"
 
 static const enum AVPixelFormat supported_formats[] = {
     AV_PIX_FMT_YUV420P,
@@ -49,8 +52,6 @@ static const enum AVPixelFormat supporte
     AV_PIX_FMT_P010,
     AV_PIX_FMT_P016,
     AV_PIX_FMT_YUV444P16,
-    AV_PIX_FMT_0RGB32,
-    AV_PIX_FMT_0BGR32,
 };
 
 #define DIV_UP(a, b) ( ((a) + (b) - 1) / (b) )
@@ -59,27 +60,13 @@ static const enum AVPixelFormat supporte
 
 #define CHECK_CU(x) FF_CUDA_CHECK_DL(ctx, s->hwctx->internal->cuda_dl, x)
 
-enum {
-    INTERP_ALGO_DEFAULT,
-
-    INTERP_ALGO_NEAREST,
-    INTERP_ALGO_BILINEAR,
-    INTERP_ALGO_BICUBIC,
-    INTERP_ALGO_LANCZOS,
-
-    INTERP_ALGO_COUNT
-};
-
 typedef struct CUDAScaleContext {
     const AVClass *class;
 
     AVCUDADeviceContext *hwctx;
 
-    enum AVPixelFormat in_fmt, out_fmt;
-    const AVPixFmtDescriptor *in_desc, *out_desc;
-    int in_planes, out_planes;
-    int in_plane_depths[4];
-    int in_plane_channels[4];
+    enum AVPixelFormat in_fmt;
+    enum AVPixelFormat out_fmt;
 
     AVBufferRef *frames_ctx;
     AVFrame     *frame;
@@ -91,6 +78,7 @@ typedef struct CUDAScaleContext {
      * Output sw format. AV_PIX_FMT_NONE for no conversion.
      */
     enum AVPixelFormat format;
+    char *format_str;
 
     char *w_expr;               ///< width  expression string
     char *h_expr;               ///< height expression string
@@ -100,21 +88,56 @@ typedef struct CUDAScaleContext {
 
     CUcontext   cu_ctx;
     CUmodule    cu_module;
-    CUfunction  cu_func;
-    CUfunction  cu_func_uv;
+
+#define VARIANT(NAME) \
+    CUfunction  cu_func_ ## NAME;
+#define VARIANTSET(NAME) \
+    VARIANT(NAME) \
+    VARIANT(NAME ## _c) \
+    VARIANT(NAME ## _p2) \
+    VARIANT(NAME ## _2) \
+    VARIANT(NAME ## _2_u) \
+    VARIANT(NAME ## _2_v) \
+    VARIANT(NAME ## _4)
+
+    VARIANTSET(8_8)
+    VARIANTSET(16_16)
+    VARIANTSET(8_16)
+    VARIANTSET(16_8)
+#undef VARIANTSET
+#undef VARIANT
+
+    CUfunction  cu_func_luma;
+    CUfunction  cu_func_chroma_u;
+    CUfunction  cu_func_chroma_v;
+
     CUstream    cu_stream;
 
-    int interp_algo;
-    int interp_use_linear;
-    int interp_as_integer;
+    CUdeviceptr srcBuffer;
+    CUdeviceptr dstBuffer;
+    int         tex_alignment;
 
-    float param;
+    const AVPixFmtDescriptor *in_desc, *out_desc;
+    int         in_planes, out_planes;
+
+    CUdeviceptr ditherBuffer;
+    CUtexObject ditherTex;
 } CUDAScaleContext;
 
 static av_cold int cudascale_init(AVFilterContext *ctx)
 {
     CUDAScaleContext *s = ctx->priv;
 
+    if (!strcmp(s->format_str, "same")) {
+        s->format = AV_PIX_FMT_NONE;
+    } else {
+        s->format = av_get_pix_fmt(s->format_str);
+        if (s->format == AV_PIX_FMT_NONE) {
+            av_log(ctx, AV_LOG_ERROR, "Unrecognized pixel format: %s\n", s->format_str);
+            return AVERROR(EINVAL);
+        }
+    }
+
     s->frame = av_frame_alloc();
     if (!s->frame)
         return AVERROR(ENOMEM);
@@ -130,13 +153,22 @@ static av_cold void cudascale_uninit(AVF
 {
     CUDAScaleContext *s = ctx->priv;
 
-    if (s->hwctx && s->cu_module) {
+    if (s->hwctx) {
         CudaFunctions *cu = s->hwctx->internal->cuda_dl;
-        CUcontext dummy;
+        CUcontext dummy, cuda_ctx = s->hwctx->cuda_ctx;
+
+        CHECK_CU(cu->cuCtxPushCurrent(cuda_ctx));
+
+        if (s->ditherTex) {
+            CHECK_CU(cu->cuTexObjectDestroy(s->ditherTex));
+            s->ditherTex = 0;
+        }
+
+        if (s->ditherBuffer) {
+            CHECK_CU(cu->cuMemFree(s->ditherBuffer));
+            s->ditherBuffer = 0;
+        }
 
-        CHECK_CU(cu->cuCtxPushCurrent(s->hwctx->cuda_ctx));
-        CHECK_CU(cu->cuModuleUnload(s->cu_module));
-        s->cu_module = NULL;
         CHECK_CU(cu->cuCtxPopCurrent(&dummy));
     }
 
@@ -192,32 +224,6 @@ static int format_is_supported(enum AVPi
     return 0;
 }
 
-static av_cold void set_format_info(AVFilterContext *ctx, enum AVPixelFormat in_format, enum AVPixelFormat out_format)
-{
-    CUDAScaleContext *s = ctx->priv;
-    int i, p, d;
-
-    s->in_fmt = in_format;
-    s->out_fmt = out_format;
-
-    s->in_desc  = av_pix_fmt_desc_get(s->in_fmt);
-    s->out_desc = av_pix_fmt_desc_get(s->out_fmt);
-    s->in_planes  = av_pix_fmt_count_planes(s->in_fmt);
-    s->out_planes = av_pix_fmt_count_planes(s->out_fmt);
-
-    // find maximum step of each component of each plane
-    // For our subset of formats, this should accurately tell us how many channels CUDA needs
-    // i.e. 1 for Y plane, 2 for UV plane of NV12, 4 for single plane of RGB0 formats
-
-    for (i = 0; i < s->in_desc->nb_components; i++) {
-        d = (s->in_desc->comp[i].depth + 7) / 8;
-        p = s->in_desc->comp[i].plane;
-        s->in_plane_channels[p] = FFMAX(s->in_plane_channels[p], s->in_desc->comp[i].step / d);
-
-        s->in_plane_depths[p] = s->in_desc->comp[i].depth;
-    }
-}
-
 static av_cold int init_processing_chain(AVFilterContext *ctx, int in_width, int in_height,
                                          int out_width, int out_height)
 {
@@ -249,7 +255,8 @@ static av_cold int init_processing_chain
         return AVERROR(ENOSYS);
     }
 
-    set_format_info(ctx, in_format, out_format);
+    s->in_fmt = in_format;
+    s->out_fmt = out_format;
 
     if (s->passthrough && in_width == out_width && in_height == out_height && in_format == out_format) {
         s->frames_ctx = av_buffer_ref(ctx->inputs[0]->hw_frames_ctx);
@@ -261,10 +268,6 @@ static av_cold int init_processing_chain
         ret = init_hwframe_ctx(s, in_frames_ctx->device_ref, out_width, out_height);
         if (ret < 0)
             return ret;
-
-        if (in_width == out_width && in_height == out_height &&
-            in_format == out_format && s->interp_algo == INTERP_ALGO_DEFAULT)
-            s->interp_algo = INTERP_ALGO_NEAREST;
     }
 
     ctx->outputs[0]->hw_frames_ctx = av_buffer_ref(s->frames_ctx);
@@ -274,74 +277,60 @@ static av_cold int init_processing_chain
     return 0;
 }
 
-static av_cold int cudascale_load_functions(AVFilterContext *ctx)
+static av_cold int cudascale_setup_dither(AVFilterContext *ctx)
 {
-    CUDAScaleContext *s = ctx->priv;
-    CUcontext dummy, cuda_ctx = s->hwctx->cuda_ctx;
-    CudaFunctions *cu = s->hwctx->internal->cuda_dl;
-    char buf[128];
-    int ret;
+    CUDAScaleContext    *s  = ctx->priv;
+    AVFilterLink        *inlink = ctx->inputs[0];
+    AVHWFramesContext   *frames_ctx = (AVHWFramesContext*)inlink->hw_frames_ctx->data;
+    AVCUDADeviceContext *device_hwctx = frames_ctx->device_ctx->hwctx;
+    CudaFunctions       *cu = device_hwctx->internal->cuda_dl;
+    CUcontext dummy, cuda_ctx = device_hwctx->cuda_ctx;
+    int ret = 0;
 
-    const char *in_fmt_name = av_get_pix_fmt_name(s->in_fmt);
-    const char *out_fmt_name = av_get_pix_fmt_name(s->out_fmt);
+    CUDA_MEMCPY2D cpy = {
+        .srcMemoryType = CU_MEMORYTYPE_HOST,
+        .dstMemoryType = CU_MEMORYTYPE_DEVICE,
+        .srcHost       = ff_fruit_dither_matrix,
+        .dstDevice     = 0,
+        .srcPitch      = ff_fruit_dither_size * sizeof(ff_fruit_dither_matrix[0]),
+        .dstPitch      = ff_fruit_dither_size * sizeof(ff_fruit_dither_matrix[0]),
+        .WidthInBytes  = ff_fruit_dither_size * sizeof(ff_fruit_dither_matrix[0]),
+        .Height        = ff_fruit_dither_size,
+    };
 
-    const char *function_infix = "";
+    CUDA_TEXTURE_DESC tex_desc = {
+        .filterMode = CU_TR_FILTER_MODE_POINT,
+        .flags = CU_TRSF_READ_AS_INTEGER,
+    };
 
-    extern const unsigned char ff_vf_scale_cuda_ptx_data[];
-    extern const unsigned int ff_vf_scale_cuda_ptx_len;
+    CUDA_RESOURCE_DESC res_desc = {
+        .resType = CU_RESOURCE_TYPE_PITCH2D,
+        .res.pitch2D.format = CU_AD_FORMAT_UNSIGNED_INT16,
+        .res.pitch2D.numChannels = 1,
+        .res.pitch2D.width = ff_fruit_dither_size,
+        .res.pitch2D.height = ff_fruit_dither_size,
+        .res.pitch2D.pitchInBytes = ff_fruit_dither_size * sizeof(ff_fruit_dither_matrix[0]),
+        .res.pitch2D.devPtr = 0,
+    };
 
-    switch(s->interp_algo) {
-    case INTERP_ALGO_NEAREST:
-        function_infix = "Nearest";
-        s->interp_use_linear = 0;
-        s->interp_as_integer = 1;
-        break;
-    case INTERP_ALGO_BILINEAR:
-        function_infix = "Bilinear";
-        s->interp_use_linear = 1;
-        s->interp_as_integer = 1;
-        break;
-    case INTERP_ALGO_DEFAULT:
-    case INTERP_ALGO_BICUBIC:
-        function_infix = "Bicubic";
-        s->interp_use_linear = 0;
-        s->interp_as_integer = 0;
-        break;
-    case INTERP_ALGO_LANCZOS:
-        function_infix = "Lanczos";
-        s->interp_use_linear = 0;
-        s->interp_as_integer = 0;
-        break;
-    default:
-        av_log(ctx, AV_LOG_ERROR, "Unknown interpolation algorithm\n");
-        return AVERROR_BUG;
-    }
+    av_assert0(sizeof(ff_fruit_dither_matrix) == sizeof(ff_fruit_dither_matrix[0]) * ff_fruit_dither_size * ff_fruit_dither_size);
 
-    ret = CHECK_CU(cu->cuCtxPushCurrent(cuda_ctx));
-    if (ret < 0)
+    if ((ret = CHECK_CU(cu->cuCtxPushCurrent(cuda_ctx))) < 0)
         return ret;
 
-    ret = ff_cuda_load_module(ctx, s->hwctx, &s->cu_module,
-                              ff_vf_scale_cuda_ptx_data, ff_vf_scale_cuda_ptx_len);
-    if (ret < 0)
+    if ((ret = CHECK_CU(cu->cuMemAlloc(&s->ditherBuffer, sizeof(ff_fruit_dither_matrix)))) < 0)
         goto fail;
 
-    snprintf(buf, sizeof(buf), "Subsample_%s_%s_%s", function_infix, in_fmt_name, out_fmt_name);
-    ret = CHECK_CU(cu->cuModuleGetFunction(&s->cu_func, s->cu_module, buf));
-    if (ret < 0) {
-        av_log(ctx, AV_LOG_FATAL, "Unsupported conversion: %s -> %s\n", in_fmt_name, out_fmt_name);
-        ret = AVERROR(ENOSYS);
+    res_desc.res.pitch2D.devPtr = cpy.dstDevice = s->ditherBuffer;
+
+    if ((ret = CHECK_CU(cu->cuMemcpy2D(&cpy))) < 0)
         goto fail;
-    }
 
-    snprintf(buf, sizeof(buf), "Subsample_%s_%s_%s_uv", function_infix, in_fmt_name, out_fmt_name);
-    ret = CHECK_CU(cu->cuModuleGetFunction(&s->cu_func_uv, s->cu_module, buf));
-    if (ret < 0)
+    if ((ret = CHECK_CU(cu->cuTexObjectCreate(&s->ditherTex, &res_desc, &tex_desc, NULL))) < 0)
         goto fail;
 
 fail:
     CHECK_CU(cu->cuCtxPopCurrent(&dummy));
-
     return ret;
 }
 
@@ -352,12 +341,50 @@ static av_cold int cudascale_config_prop
     CUDAScaleContext *s  = ctx->priv;
     AVHWFramesContext     *frames_ctx = (AVHWFramesContext*)inlink->hw_frames_ctx->data;
     AVCUDADeviceContext *device_hwctx = frames_ctx->device_ctx->hwctx;
+    CUcontext dummy, cuda_ctx = device_hwctx->cuda_ctx;
+    CudaFunctions *cu = device_hwctx->internal->cuda_dl;
     int w, h;
+    int i;
     int ret;
 
+    extern const unsigned char ff_vf_scale_cuda_ptx_data[];
+    extern const unsigned int ff_vf_scale_cuda_ptx_len;
+
     s->hwctx = device_hwctx;
     s->cu_stream = s->hwctx->stream;
 
+    ret = CHECK_CU(cu->cuCtxPushCurrent(cuda_ctx));
+    if (ret < 0)
+        goto fail;
+
+    ret = ff_cuda_load_module(ctx, s->hwctx, &s->cu_module,
+                              ff_vf_scale_cuda_ptx_data, ff_vf_scale_cuda_ptx_len);
+    if (ret < 0)
+        goto fail;
+
+#define VARIANT(NAME) \
+    CHECK_CU(cu->cuModuleGetFunction(&s->cu_func_ ## NAME, s->cu_module, "Subsample_Bilinear_" #NAME)); \
+    if (ret < 0) \
+        goto fail;
+
+#define VARIANTSET(NAME) \
+    VARIANT(NAME) \
+    VARIANT(NAME ## _c) \
+    VARIANT(NAME ## _2) \
+    VARIANT(NAME ## _p2) \
+    VARIANT(NAME ## _2_u) \
+    VARIANT(NAME ## _2_v) \
+    VARIANT(NAME ## _4)
+
+    VARIANTSET(8_8)
+    VARIANTSET(16_16)
+    VARIANTSET(8_16)
+    VARIANTSET(16_8)
+#undef VARIANTSET
+#undef VARIANT
+
+    CHECK_CU(cu->cuCtxPopCurrent(&dummy));
+
     if ((ret = ff_scale_eval_dimensions(s,
                                         s->w_expr, s->h_expr,
                                         inlink, outlink,
@@ -378,6 +405,56 @@ static av_cold int cudascale_config_prop
     if (ret < 0)
         return ret;
 
+    s->in_desc  = av_pix_fmt_desc_get(s->in_fmt);
+    s->out_desc = av_pix_fmt_desc_get(s->out_fmt);
+
+    for (i = 0; i < s->in_desc->nb_components; i++)
+        s->in_planes  = FFMAX(s->in_planes,  s->in_desc ->comp[i].plane + 1);
+
+    for (i = 0; i < s->in_desc->nb_components; i++)
+        s->out_planes = FFMAX(s->out_planes, s->out_desc->comp[i].plane + 1);
+
+#define VARIANT(INDEPTH, OUTDEPTH, SUFFIX) s->cu_func_ ## INDEPTH ## _ ## OUTDEPTH ## SUFFIX
+#define BITS(n) ((n + 7) & ~7)
+#define VARIANTSET(INDEPTH, OUTDEPTH) \
+    else if (BITS(s->in_desc->comp[0].depth)  == INDEPTH && \
+             BITS(s->out_desc->comp[0].depth) == OUTDEPTH) { \
+        s->cu_func_luma = VARIANT(INDEPTH, OUTDEPTH,); \
+        if (s->in_planes == 3 && s->out_planes == 3) { \
+            s->cu_func_chroma_u = s->cu_func_chroma_v = VARIANT(INDEPTH, OUTDEPTH, _c); \
+        } else if (s->in_planes == 3 && s->out_planes == 2) { \
+            s->cu_func_chroma_u = s->cu_func_chroma_v = VARIANT(INDEPTH, OUTDEPTH, _p2); \
+        } else if (s->in_planes == 2 && s->out_planes == 2) { \
+            s->cu_func_chroma_u = VARIANT(INDEPTH, OUTDEPTH, _2); \
+        } else if (s->in_planes == 2 && s->out_planes == 3) { \
+            s->cu_func_chroma_u = VARIANT(INDEPTH, OUTDEPTH, _2_u); \
+            s->cu_func_chroma_v = VARIANT(INDEPTH, OUTDEPTH, _2_v); \
+        } else { \
+            ret = AVERROR_BUG; \
+            goto fail; \
+        } \
+    }
+
+    if (0) {}
+    VARIANTSET(8,  8)
+    VARIANTSET(16, 16)
+    VARIANTSET(8,  16)
+    VARIANTSET(16, 8)
+    else {
+        ret = AVERROR_BUG;
+        goto fail;
+    }
+#undef VARIANTSET
+#undef VARIANT
+
+    if (s->in_desc->comp[0].depth > s->out_desc->comp[0].depth) {
+        if ((ret = cudascale_setup_dither(ctx)) < 0)
+            goto fail;
+    }
+
+    av_log(ctx, AV_LOG_VERBOSE, "w:%d h:%d -> w:%d h:%d%s\n",
+           inlink->w, inlink->h, outlink->w, outlink->h, s->passthrough ? " (passthrough)" : "");
+
     if (inlink->sample_aspect_ratio.num) {
         outlink->sample_aspect_ratio = av_mul_q((AVRational){outlink->h*inlink->w,
                                                              outlink->w*inlink->h},
@@ -386,118 +463,93 @@ static av_cold int cudascale_config_prop
         outlink->sample_aspect_ratio = inlink->sample_aspect_ratio;
     }
 
-    av_log(ctx, AV_LOG_VERBOSE, "w:%d h:%d fmt:%s -> w:%d h:%d fmt:%s%s\n",
-           inlink->w, inlink->h, av_get_pix_fmt_name(s->in_fmt),
-           outlink->w, outlink->h, av_get_pix_fmt_name(s->out_fmt),
-           s->passthrough ? " (passthrough)" : "");
-
-    ret = cudascale_load_functions(ctx);
-    if (ret < 0)
-        return ret;
-
     return 0;
 
 fail:
     return ret;
 }
 
-static int call_resize_kernel(AVFilterContext *ctx, CUfunction func,
-                              CUtexObject src_tex[4], int src_width, int src_height,
-                              AVFrame *out_frame, int dst_width, int dst_height, int dst_pitch)
+static int call_resize_kernel(AVFilterContext *ctx, CUfunction func, int channels,
+                              uint8_t *src_dptr, int src_width, int src_height, int src_pitch,
+                              uint8_t *dst_dptr, int dst_width, int dst_height, int dst_pitch,
+                              int pixel_size)
 {
     CUDAScaleContext *s = ctx->priv;
     CudaFunctions *cu = s->hwctx->internal->cuda_dl;
+    CUdeviceptr dst_devptr = (CUdeviceptr)dst_dptr;
+    CUtexObject tex = 0;
+    void *args_uchar[] = { &tex, &dst_devptr, &dst_width, &dst_height, &dst_pitch, &src_width, &src_height, &s->ditherTex };
+    int ret;
 
-    CUdeviceptr dst_devptr[4] = {
-        (CUdeviceptr)out_frame->data[0], (CUdeviceptr)out_frame->data[1],
-        (CUdeviceptr)out_frame->data[2], (CUdeviceptr)out_frame->data[3]
+    CUDA_TEXTURE_DESC tex_desc = {
+        .filterMode = CU_TR_FILTER_MODE_LINEAR,
+        .flags = CU_TRSF_READ_AS_INTEGER,
     };
 
-    void *args_uchar[] = {
-        &src_tex[0], &src_tex[1], &src_tex[2], &src_tex[3],
-        &dst_devptr[0], &dst_devptr[1], &dst_devptr[2], &dst_devptr[3],
-        &dst_width, &dst_height, &dst_pitch,
-        &src_width, &src_height, &s->param
+    CUDA_RESOURCE_DESC res_desc = {
+        .resType = CU_RESOURCE_TYPE_PITCH2D,
+        .res.pitch2D.format = pixel_size == 1 ?
+                              CU_AD_FORMAT_UNSIGNED_INT8 :
+                              CU_AD_FORMAT_UNSIGNED_INT16,
+        .res.pitch2D.numChannels = channels,
+        .res.pitch2D.width = src_width,
+        .res.pitch2D.height = src_height,
+        .res.pitch2D.pitchInBytes = src_pitch,
+        .res.pitch2D.devPtr = (CUdeviceptr)src_dptr,
     };
 
-    return CHECK_CU(cu->cuLaunchKernel(func,
-                                       DIV_UP(dst_width, BLOCKX), DIV_UP(dst_height, BLOCKY), 1,
-                                       BLOCKX, BLOCKY, 1, 0, s->cu_stream, args_uchar, NULL));
+    ret = CHECK_CU(cu->cuTexObjectCreate(&tex, &res_desc, &tex_desc, NULL));
+    if (ret < 0)
+        goto exit;
+
+    ret = CHECK_CU(cu->cuLaunchKernel(func,
+                                      DIV_UP(dst_width, BLOCKX), DIV_UP(dst_height, BLOCKY), 1,
+                                      BLOCKX, BLOCKY, 1, 0, s->cu_stream, args_uchar, NULL));
+
+exit:
+    if (tex)
+        CHECK_CU(cu->cuTexObjectDestroy(tex));
+
+    return ret;
 }
 
 static int scalecuda_resize(AVFilterContext *ctx,
                             AVFrame *out, AVFrame *in)
 {
     CUDAScaleContext *s = ctx->priv;
-    CudaFunctions *cu = s->hwctx->internal->cuda_dl;
-    CUcontext dummy, cuda_ctx = s->hwctx->cuda_ctx;
-    int i, ret;
 
-    CUtexObject tex[4] = { 0, 0, 0, 0 };
+#define DEPTH_BYTES(depth) (((depth) + 7) / 8)
 
-    ret = CHECK_CU(cu->cuCtxPushCurrent(cuda_ctx));
-    if (ret < 0)
-        return ret;
-
-    for (i = 0; i < s->in_planes; i++) {
-        CUDA_TEXTURE_DESC tex_desc = {
-            .filterMode = s->interp_use_linear ?
-                          CU_TR_FILTER_MODE_LINEAR :
-                          CU_TR_FILTER_MODE_POINT,
-            .flags = s->interp_as_integer ? CU_TRSF_READ_AS_INTEGER : 0,
-        };
-
-        CUDA_RESOURCE_DESC res_desc = {
-            .resType = CU_RESOURCE_TYPE_PITCH2D,
-            .res.pitch2D.format = s->in_plane_depths[i] <= 8 ?
-                                  CU_AD_FORMAT_UNSIGNED_INT8 :
-                                  CU_AD_FORMAT_UNSIGNED_INT16,
-            .res.pitch2D.numChannels = s->in_plane_channels[i],
-            .res.pitch2D.pitchInBytes = in->linesize[i],
-            .res.pitch2D.devPtr = (CUdeviceptr)in->data[i],
-        };
-
-        if (i == 1 || i == 2) {
-            res_desc.res.pitch2D.width = AV_CEIL_RSHIFT(in->width, s->in_desc->log2_chroma_w);
-            res_desc.res.pitch2D.height = AV_CEIL_RSHIFT(in->height, s->in_desc->log2_chroma_h);
-        } else {
-            res_desc.res.pitch2D.width = in->width;
-            res_desc.res.pitch2D.height = in->height;
-        }
-
-        ret = CHECK_CU(cu->cuTexObjectCreate(&tex[i], &res_desc, &tex_desc, NULL));
-        if (ret < 0)
-            goto exit;
-    }
-
-    // scale primary plane(s). Usually Y (and A), or single plane of RGB frames.
-    ret = call_resize_kernel(ctx, s->cu_func,
-                             tex, in->width, in->height,
-                             out, out->width, out->height, out->linesize[0]);
-    if (ret < 0)
-        goto exit;
-
-    if (s->out_planes > 1) {
-        // scale UV plane. Scale function sets both U and V plane, or singular interleaved plane.
-        ret = call_resize_kernel(ctx, s->cu_func_uv, tex,
-                                 AV_CEIL_RSHIFT(in->width, s->in_desc->log2_chroma_w),
-                                 AV_CEIL_RSHIFT(in->height, s->in_desc->log2_chroma_h),
-                                 out,
-                                 AV_CEIL_RSHIFT(out->width, s->out_desc->log2_chroma_w),
-                                 AV_CEIL_RSHIFT(out->height, s->out_desc->log2_chroma_h),
-                                 out->linesize[1]);
-        if (ret < 0)
-            goto exit;
+    call_resize_kernel(ctx, s->cu_func_luma, 1,
+                       in->data[0], in->width, in->height, in->linesize[0],
+                       out->data[0], out->width, out->height, out->linesize[0],
+                       DEPTH_BYTES(s->in_desc->comp[0].depth));
+
+    call_resize_kernel(ctx, s->cu_func_chroma_u, s->in_planes == 2 ? 2 : 1,
+                       in->data[1],
+                       AV_CEIL_RSHIFT(in->width,  s->in_desc->log2_chroma_w),
+                       AV_CEIL_RSHIFT(in->height, s->in_desc->log2_chroma_h),
+                       in->linesize[1],
+                       out->data[1],
+                       AV_CEIL_RSHIFT(out->width,  s->out_desc->log2_chroma_w),
+                       AV_CEIL_RSHIFT(out->height, s->out_desc->log2_chroma_h),
+                       out->linesize[1],
+                       DEPTH_BYTES(s->in_desc->comp[1].depth));
+
+    if (s->cu_func_chroma_v) {
+        call_resize_kernel(ctx, s->cu_func_chroma_v, s->in_planes == 2 ? 2 : 1,
+                           in->data[s->in_desc->comp[2].plane],
+                           AV_CEIL_RSHIFT(in->width,       s->in_desc->log2_chroma_w),
+                           AV_CEIL_RSHIFT(in->height,      s->in_desc->log2_chroma_h),
+                           in->linesize[s->in_desc->comp[2].plane],
+                           out->data[s->out_desc->comp[2].plane] + s->out_desc->comp[2].offset,
+                           AV_CEIL_RSHIFT(out->width,       s->out_desc->log2_chroma_w),
+                           AV_CEIL_RSHIFT(out->height,      s->out_desc->log2_chroma_h),
+                           out->linesize[s->out_desc->comp[2].plane],
+                           DEPTH_BYTES(s->in_desc->comp[2].depth));
     }
 
-exit:
-    for (i = 0; i < s->in_planes; i++)
-        if (tex[i])
-            CHECK_CU(cu->cuTexObjectDestroy(tex[i]));
-
-    CHECK_CU(cu->cuCtxPopCurrent(&dummy));
-
-    return ret;
+    return 0;
 }
 
 static int cudascale_scale(AVFilterContext *ctx, AVFrame *out, AVFrame *in)
@@ -584,21 +636,15 @@ static AVFrame *cudascale_get_video_buff
 #define OFFSET(x) offsetof(CUDAScaleContext, x)
 #define FLAGS (AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM)
 static const AVOption options[] = {
-    { "w", "Output video width",  OFFSET(w_expr), AV_OPT_TYPE_STRING, { .str = "iw" }, .flags = FLAGS },
-    { "h", "Output video height", OFFSET(h_expr), AV_OPT_TYPE_STRING, { .str = "ih" }, .flags = FLAGS },
-    { "interp_algo", "Interpolation algorithm used for resizing", OFFSET(interp_algo), AV_OPT_TYPE_INT, { .i64 = INTERP_ALGO_DEFAULT }, 0, INTERP_ALGO_COUNT - 1, FLAGS, "interp_algo" },
-        { "nearest",  "nearest neighbour", 0, AV_OPT_TYPE_CONST, { .i64 = INTERP_ALGO_NEAREST }, 0, 0, FLAGS, "interp_algo" },
-        { "bilinear", "bilinear", 0, AV_OPT_TYPE_CONST, { .i64 = INTERP_ALGO_BILINEAR }, 0, 0, FLAGS, "interp_algo" },
-        { "bicubic",  "bicubic",  0, AV_OPT_TYPE_CONST, { .i64 = INTERP_ALGO_BICUBIC  }, 0, 0, FLAGS, "interp_algo" },
-        { "lanczos",  "lanczos",  0, AV_OPT_TYPE_CONST, { .i64 = INTERP_ALGO_LANCZOS  }, 0, 0, FLAGS, "interp_algo" },
-    { "format", "Output video pixel format", OFFSET(format), AV_OPT_TYPE_PIXEL_FMT, { .i64 = AV_PIX_FMT_NONE }, INT_MIN, INT_MAX, .flags=FLAGS },
+    { "w",      "Output video width",  OFFSET(w_expr),     AV_OPT_TYPE_STRING, { .str = "iw"   }, .flags = FLAGS },
+    { "h",      "Output video height", OFFSET(h_expr),     AV_OPT_TYPE_STRING, { .str = "ih"   }, .flags = FLAGS },
+    { "format", "Output format",       OFFSET(format_str), AV_OPT_TYPE_STRING, { .str = "same" }, .flags = FLAGS },
     { "passthrough", "Do not process frames at all if parameters match", OFFSET(passthrough), AV_OPT_TYPE_BOOL, { .i64 = 1 }, 0, 1, FLAGS },
-    { "param", "Algorithm-Specific parameter", OFFSET(param), AV_OPT_TYPE_FLOAT, { .dbl = SCALE_CUDA_PARAM_DEFAULT }, -FLT_MAX, FLT_MAX, FLAGS },
-    { "force_original_aspect_ratio", "decrease or increase w/h if necessary to keep the original AR", OFFSET(force_original_aspect_ratio), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 2, FLAGS, "force_oar" },
-        { "disable",  NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 0 }, 0, 0, FLAGS, "force_oar" },
-        { "decrease", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 1 }, 0, 0, FLAGS, "force_oar" },
-        { "increase", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 2 }, 0, 0, FLAGS, "force_oar" },
-    { "force_divisible_by", "enforce that the output resolution is divisible by a defined integer when force_original_aspect_ratio is used", OFFSET(force_divisible_by), AV_OPT_TYPE_INT, { .i64 = 1 }, 1, 256, FLAGS },
+    { "force_original_aspect_ratio", "decrease or increase w/h if necessary to keep the original AR", OFFSET(force_original_aspect_ratio), AV_OPT_TYPE_INT, { .i64 = 0}, 0, 2, FLAGS, "force_oar" },
+    { "disable",  NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 0 }, 0, 0, FLAGS, "force_oar" },
+    { "decrease", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 1 }, 0, 0, FLAGS, "force_oar" },
+    { "increase", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 2 }, 0, 0, FLAGS, "force_oar" },
+    { "force_divisible_by", "enforce that the output resolution is divisible by a defined integer when force_original_aspect_ratio is used", OFFSET(force_divisible_by), AV_OPT_TYPE_INT, { .i64 = 1}, 1, 256, FLAGS },
     { NULL },
 };
 
@@ -611,9 +657,9 @@ static const AVClass cudascale_class = {
 
 static const AVFilterPad cudascale_inputs[] = {
     {
-        .name        = "default",
-        .type        = AVMEDIA_TYPE_VIDEO,
-        .filter_frame = cudascale_filter_frame,
+        .name             = "default",
+        .type             = AVMEDIA_TYPE_VIDEO,
+        .filter_frame     = cudascale_filter_frame,
         .get_buffer.video = cudascale_get_video_buffer,
     },
 };
@@ -627,14 +673,14 @@ static const AVFilterPad cudascale_outpu
 };
 
 const AVFilter ff_vf_scale_cuda = {
-    .name      = "scale_cuda",
-    .description = NULL_IF_CONFIG_SMALL("GPU accelerated video resizer"),
+    .name          = "scale_cuda",
+    .description   = NULL_IF_CONFIG_SMALL("GPU accelerated video resizer"),
 
     .init          = cudascale_init,
     .uninit        = cudascale_uninit,
 
-    .priv_size = sizeof(CUDAScaleContext),
-    .priv_class = &cudascale_class,
+    .priv_size     = sizeof(CUDAScaleContext),
+    .priv_class    = &cudascale_class,
 
     FILTER_INPUTS(cudascale_inputs),
     FILTER_OUTPUTS(cudascale_outputs),
Index: jellyfin-ffmpeg/libavfilter/vf_scale_cuda.cu
===================================================================
--- jellyfin-ffmpeg.orig/libavfilter/vf_scale_cuda.cu
+++ jellyfin-ffmpeg/libavfilter/vf_scale_cuda.cu
@@ -1,5 +1,5 @@
 /*
- * This file is part of FFmpeg.
+ * Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
@@ -20,1217 +20,174 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
-#include "cuda/vector_helpers.cuh"
-#include "vf_scale_cuda.h"
+typedef unsigned char uchar;
+typedef unsigned short ushort;
 
-template<typename T>
-using subsample_function_t = T (*)(cudaTextureObject_t tex, int xo, int yo,
-                                   int dst_width, int dst_height,
-                                   int src_width, int src_height,
-                                   int bit_depth, float param);
-
-// --- CONVERSION LOGIC ---
-
-static const ushort mask_10bit = 0xFFC0;
-static const ushort mask_16bit = 0xFFFF;
-
-static inline __device__ ushort conv_8to16(uchar in, ushort mask)
-{
-    return ((ushort)in | ((ushort)in << 8)) & mask;
-}
-
-static inline __device__ uchar conv_16to8(ushort in)
-{
-    return in >> 8;
-}
-
-static inline __device__ uchar conv_10to8(ushort in)
-{
-    return in >> 8;
-}
-
-static inline __device__ ushort conv_10to16(ushort in)
-{
-    return in | (in >> 10);
-}
-
-static inline __device__ ushort conv_16to10(ushort in)
-{
-    return in & mask_10bit;
-}
-
-#define DEF_F(N, T) \
-    template<subsample_function_t<in_T> subsample_func_y,                                      \
-             subsample_function_t<in_T_uv> subsample_func_uv>                                  \
-    __device__ static inline void N(cudaTextureObject_t src_tex[4], T *dst[4], int xo, int yo, \
-                                    int dst_width, int dst_height, int dst_pitch,              \
-                                    int src_width, int src_height, float param)
-
-#define SUB_F(m, plane) \
-    subsample_func_##m(src_tex[plane], xo, yo, \
-                       dst_width, dst_height,  \
-                       src_width, src_height,  \
-                       in_bit_depth, param)
-
-// FFmpeg passes pitch in bytes, CUDA uses potentially larger types
-#define FIXED_PITCH \
-    (dst_pitch/sizeof(*dst[0]))
-
-#define DEFAULT_DST(n) \
-    dst[n][yo*FIXED_PITCH+xo]
-
-// yuv420p->X
-
-struct Convert_yuv420p_yuv420p
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-        DEFAULT_DST(2) = SUB_F(uv, 2);
-    }
-};
-
-struct Convert_yuv420p_nv12
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef uchar out_T;
-    typedef uchar2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_uchar2(
-            SUB_F(uv, 1),
-            SUB_F(uv, 2)
-        );
-    }
-};
-
-struct Convert_yuv420p_yuv444p
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-        DEFAULT_DST(2) = SUB_F(uv, 2);
-    }
-};
-
-struct Convert_yuv420p_p010le
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_10bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_ushort2(
-            conv_8to16(SUB_F(uv, 1), mask_10bit),
-            conv_8to16(SUB_F(uv, 2), mask_10bit)
-        );
-    }
-};
-
-struct Convert_yuv420p_p016le
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_16bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_ushort2(
-            conv_8to16(SUB_F(uv, 1), mask_16bit),
-            conv_8to16(SUB_F(uv, 2), mask_16bit)
-        );
-    }
-};
-
-struct Convert_yuv420p_yuv444p16le
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef ushort out_T;
-    typedef ushort out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_16bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = conv_8to16(SUB_F(uv, 1), mask_16bit);
-        DEFAULT_DST(2) = conv_8to16(SUB_F(uv, 2), mask_16bit);
-    }
-};
-
-// nv12->X
-
-struct Convert_nv12_yuv420p
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = res.x;
-        DEFAULT_DST(2) = res.y;
-    }
-};
-
-struct Convert_nv12_nv12
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-    }
-};
+#define SHIFTDOWN(val) (dstbase)(val >> abs(2 + shift))
+#define SHIFTUP(val)   (dstbase)(val << abs(-shift - 2))
 
-struct Convert_nv12_yuv444p
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift1_d
 {
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
+    typedef DST dstbase;
 
-    DEF_F(Convert, out_T)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = res.x;
-        DEFAULT_DST(2) = res.y;
-    }
-};
-
-struct Convert_nv12_p010le
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_10bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = make_ushort2(
-            conv_8to16(res.x, mask_10bit),
-            conv_8to16(res.y, mask_10bit)
-        );
-    }
-};
-
-struct Convert_nv12_p016le
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_16bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = make_ushort2(
-            conv_8to16(res.x, mask_16bit),
-            conv_8to16(res.y, mask_16bit)
-        );
-    }
-};
-
-struct Convert_nv12_yuv444p16le
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_16bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = conv_8to16(res.x, mask_16bit);
-        DEFAULT_DST(2) = conv_8to16(res.y, mask_16bit);
-    }
-};
-
-// yuv444p->X
-
-struct Convert_yuv444p_yuv420p
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-        DEFAULT_DST(2) = SUB_F(uv, 2);
-    }
-};
-
-struct Convert_yuv444p_nv12
-{
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef uchar out_T;
-    typedef uchar2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
+        unsigned ret = (unsigned)i1 + (unsigned)i2 + (unsigned)i3 + (unsigned)i4 + ((1 + d) >> (sizeof(SRC) * 8 - dither + 3));
 
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_uchar2(
-            SUB_F(uv, 1),
-            SUB_F(uv, 2)
-        );
+        if (shift > -2)
+            return SHIFTDOWN(ret);
+        else
+            return SHIFTUP(ret);
     }
 };
 
-struct Convert_yuv444p_yuv444p
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift1
 {
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
+    typedef DST dstbase;
 
-    DEF_F(Convert, out_T)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
+        unsigned ret = (unsigned)i1 + (unsigned)i2 + (unsigned)i3 + (unsigned)i4 + 2;
 
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-        DEFAULT_DST(2) = SUB_F(uv, 2);
+        if (shift > -2)
+            return SHIFTDOWN(ret);
+        else
+            return SHIFTUP(ret);
     }
 };
 
-struct Convert_yuv444p_p010le
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift2
 {
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
+    typedef decltype(DST::x) dstbase;
 
-    DEF_F(Convert, out_T)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_10bit);
-    }
+        unsigned retx = (unsigned)i1.x + (unsigned)i2.x + (unsigned)i3.x + (unsigned)i4.x + 2;
+        unsigned rety = (unsigned)i1.y + (unsigned)i2.y + (unsigned)i3.y + (unsigned)i4.y + 2;
 
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_ushort2(
-            conv_8to16(SUB_F(uv, 1), mask_10bit),
-            conv_8to16(SUB_F(uv, 2), mask_10bit)
-        );
+        if (shift > -2)
+            return { SHIFTDOWN(retx), SHIFTDOWN(rety) };
+        else
+            return { SHIFTUP(retx),   SHIFTUP(rety)   };
     }
 };
 
-struct Convert_yuv444p_p016le
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift2_x
 {
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_16bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_ushort2(
-            conv_8to16(SUB_F(uv, 1), mask_16bit),
-            conv_8to16(SUB_F(uv, 2), mask_16bit)
-        );
+        return add_conv_shift1<unsigned, DST, shift, dither>()(i1.x, i2.x, i3.x, i4.x, d);
     }
 };
 
-struct Convert_yuv444p_yuv444p16le
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift2_y
 {
-    static const int in_bit_depth = 8;
-    typedef uchar in_T;
-    typedef uchar in_T_uv;
-    typedef ushort out_T;
-    typedef ushort out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_8to16(SUB_F(y, 0), mask_16bit);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(1) = conv_8to16(SUB_F(uv, 1), mask_16bit);
-        DEFAULT_DST(2) = conv_8to16(SUB_F(uv, 2), mask_16bit);
+        return add_conv_shift1<unsigned, DST, shift, dither>()(i1.y, i2.y, i3.y, i4.y, d);
     }
 };
 
-// p010le->X
-
-struct Convert_p010le_yuv420p
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift3
 {
-    static const int in_bit_depth = 10;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
+    typedef decltype(DST::x) dstbase;
 
-    DEF_F(Convert, out_T)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(0) = conv_10to8(SUB_F(y, 0));
-    }
+        unsigned retx = (unsigned)i1.x + (unsigned)i2.x + (unsigned)i3.x + (unsigned)i4.x + 2;
+        unsigned rety = (unsigned)i1.y + (unsigned)i2.y + (unsigned)i3.y + (unsigned)i4.y + 2;
+        unsigned retz = (unsigned)i1.z + (unsigned)i2.z + (unsigned)i3.z + (unsigned)i4.z + 2;
 
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = conv_10to8(res.x);
-        DEFAULT_DST(2) = conv_10to8(res.y);
+        if (shift > -2)
+            return { SHIFTDOWN(retx), SHIFTDOWN(rety), SHIFTDOWN(retz) };
+        else
+            return { SHIFTUP(retx),   SHIFTUP(rety),   SHIFTUP(retz)   };
     }
 };
 
-struct Convert_p010le_nv12
+template<class SRC, class DST, int shift, int dither> struct add_conv_shift4
 {
-    static const int in_bit_depth = 10;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar2 out_T_uv;
+    typedef decltype(DST::x) dstbase;
 
-    DEF_F(Convert, out_T)
+    __inline__ __device__ DST operator()(SRC i1, SRC i2, SRC i3, SRC i4, ushort d)
     {
-        DEFAULT_DST(0) = conv_10to8(SUB_F(y, 0));
-    }
+        unsigned retx = (unsigned)i1.x + (unsigned)i2.x + (unsigned)i3.x + (unsigned)i4.x + 2;
+        unsigned rety = (unsigned)i1.y + (unsigned)i2.y + (unsigned)i3.y + (unsigned)i4.y + 2;
+        unsigned retz = (unsigned)i1.z + (unsigned)i2.z + (unsigned)i3.z + (unsigned)i4.z + 2;
+        unsigned retw = (unsigned)i1.w + (unsigned)i2.w + (unsigned)i3.w + (unsigned)i4.w + 2;
 
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = make_uchar2(
-            conv_10to8(res.x),
-            conv_10to8(res.y)
-        );
+        if (shift > -2)
+            return { SHIFTDOWN(retx), SHIFTDOWN(rety), SHIFTDOWN(retz), SHIFTDOWN(retw) };
+        else
+            return { SHIFTUP(retx),   SHIFTUP(rety),   SHIFTUP(retz),   SHIFTUP(retw)   };
     }
 };
 
-struct Convert_p010le_yuv444p
-{
-    static const int in_bit_depth = 10;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_10to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = conv_10to8(res.x);
-        DEFAULT_DST(2) = conv_10to8(res.y);
-    }
-};
-
-struct Convert_p010le_p010le
-{
-    static const int in_bit_depth = 10;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-    }
-};
-
-struct Convert_p010le_p016le
-{
-    static const int in_bit_depth = 10;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_10to16(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = make_ushort2(
-            conv_10to16(res.x),
-            conv_10to16(res.y)
-        );
-    }
-};
-
-struct Convert_p010le_yuv444p16le
-{
-    static const int in_bit_depth = 10;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_10to16(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = conv_10to16(res.x);
-        DEFAULT_DST(2) = conv_10to16(res.y);
-    }
-};
-
-// p016le->X
-
-struct Convert_p016le_yuv420p
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = conv_16to8(res.x);
-        DEFAULT_DST(2) = conv_16to8(res.y);
-    }
-};
-
-struct Convert_p016le_nv12
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = make_uchar2(
-            conv_16to8(res.x),
-            conv_16to8(res.y)
-        );
-    }
-};
-
-struct Convert_p016le_yuv444p
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = conv_16to8(res.x);
-        DEFAULT_DST(2) = conv_16to8(res.y);
-    }
-};
-
-struct Convert_p016le_p010le
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to10(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = make_ushort2(
-            conv_16to10(res.x),
-            conv_16to10(res.y)
-        );
-    }
-};
-
-struct Convert_p016le_p016le
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-    }
-};
-
-struct Convert_p016le_yuv444p16le
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort2 in_T_uv;
-    typedef ushort out_T;
-    typedef ushort out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        in_T_uv res = SUB_F(uv, 1);
-        DEFAULT_DST(1) = res.x;
-        DEFAULT_DST(2) = res.y;
-    }
-};
-
-// yuv444p16le->X
-
-struct Convert_yuv444p16le_yuv420p
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = conv_16to8(SUB_F(uv, 1));
-        DEFAULT_DST(2) = conv_16to8(SUB_F(uv, 2));
-    }
-};
-
-struct Convert_yuv444p16le_nv12
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort in_T_uv;
-    typedef uchar out_T;
-    typedef uchar2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_uchar2(
-            conv_16to8(SUB_F(uv, 1)),
-            conv_16to8(SUB_F(uv, 2))
-        );
-    }
-};
-
-struct Convert_yuv444p16le_yuv444p
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort in_T_uv;
-    typedef uchar out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to8(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = conv_16to8(SUB_F(uv, 1));
-        DEFAULT_DST(2) = conv_16to8(SUB_F(uv, 2));
-    }
-};
-
-struct Convert_yuv444p16le_p010le
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = conv_16to10(SUB_F(y, 0));
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_ushort2(
-            conv_16to10(SUB_F(uv, 1)),
-            conv_16to10(SUB_F(uv, 2))
-        );
-    }
-};
-
-struct Convert_yuv444p16le_p016le
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort in_T_uv;
-    typedef ushort out_T;
-    typedef ushort2 out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = make_ushort2(
-            SUB_F(uv, 1),
-            SUB_F(uv, 2)
-        );
-    }
-};
-
-struct Convert_yuv444p16le_yuv444p16le
-{
-    static const int in_bit_depth = 16;
-    typedef ushort in_T;
-    typedef ushort in_T_uv;
-    typedef ushort out_T;
-    typedef ushort out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-        DEFAULT_DST(1) = SUB_F(uv, 1);
-        DEFAULT_DST(2) = SUB_F(uv, 2);
-    }
-};
-
-// bgr0->X
-
-struct Convert_bgr0_bgr0
+template<class SRC, class DST, template<class, class, int, int> class conv, int pitch, int shift, int dither>
+__inline__ __device__ void Subsample_Bilinear(cudaTextureObject_t tex,
+                                   DST *dst,
+                                   int dst_width, int dst_height, int dst_pitch,
+                                   int src_width, int src_height,
+                                   cudaTextureObject_t ditherTex)
 {
-    static const int in_bit_depth = 8;
-    typedef uchar4 in_T;
-    typedef uchar in_T_uv;
-    typedef uchar4 out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
+    int xo = blockIdx.x * blockDim.x + threadIdx.x;
+    int yo = blockIdx.y * blockDim.y + threadIdx.y;
 
-    DEF_F(Convert_uv, out_T_uv)
+    if (yo < dst_height && xo < dst_width)
     {
-    }
-};
+        float hscale = (float)src_width / (float)dst_width;
+        float vscale = (float)src_height / (float)dst_height;
+        float xi = (xo + 0.5f) * hscale;
+        float yi = (yo + 0.5f) * vscale;
+        // 3-tap filter weights are {wh,1.0,wh} and {wv,1.0,wv}
+        float wh = min(max(0.5f * (hscale - 1.0f), 0.0f), 1.0f);
+        float wv = min(max(0.5f * (vscale - 1.0f), 0.0f), 1.0f);
+        // Convert weights to two bilinear weights -> {wh,1.0,wh} -> {wh,0.5,0} + {0,0.5,wh}
+        float dx = wh / (0.5f + wh);
+        float dy = wv / (0.5f + wv);
+
+        SRC i0 = tex2D<SRC>(tex, xi-dx, yi-dy);
+        SRC i1 = tex2D<SRC>(tex, xi+dx, yi-dy);
+        SRC i2 = tex2D<SRC>(tex, xi-dx, yi+dy);
+        SRC i3 = tex2D<SRC>(tex, xi+dx, yi+dy);
 
-struct Convert_bgr0_rgb0
-{
-    static const int in_bit_depth = 8;
-    typedef uchar4 in_T;
-    typedef uchar in_T_uv;
-    typedef uchar4 out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        uchar4 res = SUB_F(y, 0);
-        DEFAULT_DST(0) = make_uchar4(
-            res.z,
-            res.y,
-            res.x,
-            res.w
-        );
-    }
+        ushort ditherVal = dither ? tex2D<ushort>(ditherTex, xo, yo) : 0;
 
-    DEF_F(Convert_uv, out_T_uv)
-    {
+        dst[yo*(dst_pitch / sizeof(DST))+xo*pitch] = conv<SRC, DST, shift, dither>()(i0, i1, i2, i3, ditherVal);
     }
-};
-
-// rgb0->X
-
-struct Convert_rgb0_bgr0
-{
-    static const int in_bit_depth = 8;
-    typedef uchar4 in_T;
-    typedef uchar in_T_uv;
-    typedef uchar4 out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        uchar4 res = SUB_F(y, 0);
-        DEFAULT_DST(0) = make_uchar4(
-            res.z,
-            res.y,
-            res.x,
-            res.w
-        );
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-    }
-};
-
-struct Convert_rgb0_rgb0
-{
-    static const int in_bit_depth = 8;
-    typedef uchar4 in_T;
-    typedef uchar in_T_uv;
-    typedef uchar4 out_T;
-    typedef uchar out_T_uv;
-
-    DEF_F(Convert, out_T)
-    {
-        DEFAULT_DST(0) = SUB_F(y, 0);
-    }
-
-    DEF_F(Convert_uv, out_T_uv)
-    {
-    }
-};
-
-// --- SCALING LOGIC ---
-
-typedef float4 (*coeffs_function_t)(float, float);
-
-__device__ static inline float4 lanczos_coeffs(float x, float param)
-{
-    const float pi = 3.141592654f;
-
-    float4 res = make_float4(
-        pi * (x + 1),
-        pi * x,
-        pi * (x - 1),
-        pi * (x - 2));
-
-    res.x = res.x == 0.0f ? 1.0f :
-        __sinf(res.x) * __sinf(res.x / 2.0f) / (res.x * res.x / 2.0f);
-    res.y = res.y == 0.0f ? 1.0f :
-        __sinf(res.y) * __sinf(res.y / 2.0f) / (res.y * res.y / 2.0f);
-    res.z = res.z == 0.0f ? 1.0f :
-        __sinf(res.z) * __sinf(res.z / 2.0f) / (res.z * res.z / 2.0f);
-    res.w = res.w == 0.0f ? 1.0f :
-        __sinf(res.w) * __sinf(res.w / 2.0f) / (res.w * res.w / 2.0f);
-
-    return res / (res.x + res.y + res.z + res.w);
-}
-
-__device__ static inline float4 bicubic_coeffs(float x, float param)
-{
-    const float A = param == SCALE_CUDA_PARAM_DEFAULT ? 0.0f : -param;
-
-    float4 res;
-    res.x = ((A * (x + 1) - 5 * A) * (x + 1) + 8 * A) * (x + 1) - 4 * A;
-    res.y = ((A + 2) * x - (A + 3)) * x * x + 1;
-    res.z = ((A + 2) * (1 - x) - (A + 3)) * (1 - x) * (1 - x) + 1;
-    res.w = 1.0f - res.x - res.y - res.z;
-
-    return res;
-}
-
-template<typename V>
-__device__ static inline V apply_coeffs(float4 coeffs, V c0, V c1, V c2, V c3)
-{
-    V res = c0 * coeffs.x;
-    res  += c1 * coeffs.y;
-    res  += c2 * coeffs.z;
-    res  += c3 * coeffs.w;
-
-    return res;
 }
 
-template<typename T>
-__device__ static inline T Subsample_Nearest(cudaTextureObject_t tex,
-                                             int xo, int yo,
-                                             int dst_width, int dst_height,
-                                             int src_width, int src_height,
-                                             int bit_depth, float param)
-{
-    float hscale = (float)src_width / (float)dst_width;
-    float vscale = (float)src_height / (float)dst_height;
-    float xi = (xo + 0.5f) * hscale;
-    float yi = (yo + 0.5f) * vscale;
-
-    return tex2D<T>(tex, xi, yi);
-}
-
-template<typename T>
-__device__ static inline T Subsample_Bilinear(cudaTextureObject_t tex,
-                                              int xo, int yo,
-                                              int dst_width, int dst_height,
-                                              int src_width, int src_height,
-                                              int bit_depth, float param)
-{
-    float hscale = (float)src_width / (float)dst_width;
-    float vscale = (float)src_height / (float)dst_height;
-    float xi = (xo + 0.5f) * hscale;
-    float yi = (yo + 0.5f) * vscale;
-    // 3-tap filter weights are {wh,1.0,wh} and {wv,1.0,wv}
-    float wh = min(max(0.5f * (hscale - 1.0f), 0.0f), 1.0f);
-    float wv = min(max(0.5f * (vscale - 1.0f), 0.0f), 1.0f);
-    // Convert weights to two bilinear weights -> {wh,1.0,wh} -> {wh,0.5,0} + {0,0.5,wh}
-    float dx = wh / (0.5f + wh);
-    float dy = wv / (0.5f + wv);
-
-    intT r;
-    vec_set_scalar(r, 2);
-    r += tex2D<T>(tex, xi - dx, yi - dy);
-    r += tex2D<T>(tex, xi + dx, yi - dy);
-    r += tex2D<T>(tex, xi - dx, yi + dy);
-    r += tex2D<T>(tex, xi + dx, yi + dy);
-
-    T res;
-    vec_set(res, r >> 2);
-
-    return res;
-}
-
-template<typename T, coeffs_function_t coeffs_function>
-__device__ static inline T Subsample_Bicubic(cudaTextureObject_t tex,
-                                             int xo, int yo,
-                                             int dst_width, int dst_height,
-                                             int src_width, int src_height,
-                                             int bit_depth, float param)
-{
-    float hscale = (float)src_width / (float)dst_width;
-    float vscale = (float)src_height / (float)dst_height;
-    float xi = (xo + 0.5f) * hscale - 0.5f;
-    float yi = (yo + 0.5f) * vscale - 0.5f;
-    float px = floor(xi);
-    float py = floor(yi);
-    float fx = xi - px;
-    float fy = yi - py;
-
-    float factor = bit_depth > 8 ? 0xFFFF : 0xFF;
-
-    float4 coeffsX = coeffs_function(fx, param);
-    float4 coeffsY = coeffs_function(fy, param);
-
-#define PIX(x, y) tex2D<floatT>(tex, (x), (y))
-
-    return from_floatN<T, floatT>(
-        apply_coeffs<floatT>(coeffsY,
-            apply_coeffs<floatT>(coeffsX, PIX(px - 1, py - 1), PIX(px, py - 1), PIX(px + 1, py - 1), PIX(px + 2, py - 1)),
-            apply_coeffs<floatT>(coeffsX, PIX(px - 1, py    ), PIX(px, py    ), PIX(px + 1, py    ), PIX(px + 2, py    )),
-            apply_coeffs<floatT>(coeffsX, PIX(px - 1, py + 1), PIX(px, py + 1), PIX(px + 1, py + 1), PIX(px + 2, py + 1)),
-            apply_coeffs<floatT>(coeffsX, PIX(px - 1, py + 2), PIX(px, py + 2), PIX(px + 1, py + 2), PIX(px + 2, py + 2))
-        ) * factor
-    );
-
-#undef PIX
-}
-
-/// --- FUNCTION EXPORTS ---
-
-#define KERNEL_ARGS(T) \
-    cudaTextureObject_t src_tex_0, cudaTextureObject_t src_tex_1, \
-    cudaTextureObject_t src_tex_2, cudaTextureObject_t src_tex_3, \
-    T *dst_0, T *dst_1, T *dst_2, T *dst_3,                       \
-    int dst_width, int dst_height, int dst_pitch,                 \
-    int src_width, int src_height, float param
-
-#define SUBSAMPLE(Convert, T) \
-    cudaTextureObject_t src_tex[4] =                    \
-        { src_tex_0, src_tex_1, src_tex_2, src_tex_3 }; \
-    T *dst[4] = { dst_0, dst_1, dst_2, dst_3 };         \
-    int xo = blockIdx.x * blockDim.x + threadIdx.x;     \
-    int yo = blockIdx.y * blockDim.y + threadIdx.y;     \
-    if (yo >= dst_height || xo >= dst_width) return;    \
-    Convert(                                            \
-        src_tex, dst, xo, yo,                           \
-        dst_width, dst_height, dst_pitch,               \
-        src_width, src_height, param);
-
 extern "C" {
 
-#define NEAREST_KERNEL(C, S) \
-    __global__ void Subsample_Nearest_##C##S(                      \
-        KERNEL_ARGS(Convert_##C::out_T##S))                        \
-    {                                                              \
-        SUBSAMPLE((Convert_##C::Convert##S<                        \
-                       Subsample_Nearest<Convert_##C::in_T>,       \
-                       Subsample_Nearest<Convert_##C::in_T_uv> >), \
-                  Convert_##C::out_T##S) \
-    }
-
-#define NEAREST_KERNEL_RAW(C) \
-    NEAREST_KERNEL(C,)   \
-    NEAREST_KERNEL(C,_uv)
-
-#define NEAREST_KERNELS(C) \
-    NEAREST_KERNEL_RAW(yuv420p_ ## C)     \
-    NEAREST_KERNEL_RAW(nv12_ ## C)        \
-    NEAREST_KERNEL_RAW(yuv444p_ ## C)     \
-    NEAREST_KERNEL_RAW(p010le_ ## C)      \
-    NEAREST_KERNEL_RAW(p016le_ ## C)      \
-    NEAREST_KERNEL_RAW(yuv444p16le_ ## C)
-
-NEAREST_KERNELS(yuv420p)
-NEAREST_KERNELS(nv12)
-NEAREST_KERNELS(yuv444p)
-NEAREST_KERNELS(p010le)
-NEAREST_KERNELS(p016le)
-NEAREST_KERNELS(yuv444p16le)
-
-NEAREST_KERNEL_RAW(bgr0_bgr0)
-NEAREST_KERNEL_RAW(rgb0_rgb0)
-NEAREST_KERNEL_RAW(bgr0_rgb0)
-NEAREST_KERNEL_RAW(rgb0_bgr0)
-
-
-#define BILINEAR_KERNEL(C, S) \
-    __global__ void Subsample_Bilinear_##C##S(                      \
-        KERNEL_ARGS(Convert_##C::out_T##S))                         \
-    {                                                               \
-        SUBSAMPLE((Convert_##C::Convert##S<                         \
-                       Subsample_Bilinear<Convert_##C::in_T>,       \
-                       Subsample_Bilinear<Convert_##C::in_T_uv> >), \
-                  Convert_##C::out_T##S) \
-    }
-
-#define BILINEAR_KERNEL_RAW(C) \
-    BILINEAR_KERNEL(C,)   \
-    BILINEAR_KERNEL(C,_uv)
-
-#define BILINEAR_KERNELS(C) \
-    BILINEAR_KERNEL_RAW(yuv420p_ ## C)     \
-    BILINEAR_KERNEL_RAW(nv12_ ## C)        \
-    BILINEAR_KERNEL_RAW(yuv444p_ ## C)     \
-    BILINEAR_KERNEL_RAW(p010le_ ## C)      \
-    BILINEAR_KERNEL_RAW(p016le_ ## C)      \
-    BILINEAR_KERNEL_RAW(yuv444p16le_ ## C)
-
-BILINEAR_KERNELS(yuv420p)
-BILINEAR_KERNELS(nv12)
-BILINEAR_KERNELS(yuv444p)
-BILINEAR_KERNELS(p010le)
-BILINEAR_KERNELS(p016le)
-BILINEAR_KERNELS(yuv444p16le)
-
-BILINEAR_KERNEL_RAW(bgr0_bgr0)
-BILINEAR_KERNEL_RAW(rgb0_rgb0)
-BILINEAR_KERNEL_RAW(bgr0_rgb0)
-BILINEAR_KERNEL_RAW(rgb0_bgr0)
-
-#define BICUBIC_KERNEL(C, S) \
-    __global__ void Subsample_Bicubic_##C##S(                                        \
-        KERNEL_ARGS(Convert_##C::out_T##S))                                          \
-    {                                                                                \
-        SUBSAMPLE((Convert_##C::Convert##S<                                          \
-                       Subsample_Bicubic<Convert_## C ::in_T, bicubic_coeffs>,       \
-                       Subsample_Bicubic<Convert_## C ::in_T_uv, bicubic_coeffs> >), \
-                  Convert_##C::out_T##S)                                             \
-    }
-
-#define BICUBIC_KERNEL_RAW(C) \
-    BICUBIC_KERNEL(C,)   \
-    BICUBIC_KERNEL(C,_uv)
-
-#define BICUBIC_KERNELS(C) \
-    BICUBIC_KERNEL_RAW(yuv420p_ ## C)     \
-    BICUBIC_KERNEL_RAW(nv12_ ## C)        \
-    BICUBIC_KERNEL_RAW(yuv444p_ ## C)     \
-    BICUBIC_KERNEL_RAW(p010le_ ## C)      \
-    BICUBIC_KERNEL_RAW(p016le_ ## C)      \
-    BICUBIC_KERNEL_RAW(yuv444p16le_ ## C)
-
-BICUBIC_KERNELS(yuv420p)
-BICUBIC_KERNELS(nv12)
-BICUBIC_KERNELS(yuv444p)
-BICUBIC_KERNELS(p010le)
-BICUBIC_KERNELS(p016le)
-BICUBIC_KERNELS(yuv444p16le)
-
-BICUBIC_KERNEL_RAW(bgr0_bgr0)
-BICUBIC_KERNEL_RAW(rgb0_rgb0)
-BICUBIC_KERNEL_RAW(bgr0_rgb0)
-BICUBIC_KERNEL_RAW(rgb0_bgr0)
-
-
-#define LANCZOS_KERNEL(C, S) \
-    __global__ void Subsample_Lanczos_##C##S(                                        \
-        KERNEL_ARGS(Convert_##C::out_T##S))                                          \
-    {                                                                                \
-        SUBSAMPLE((Convert_##C::Convert##S<                                          \
-                       Subsample_Bicubic<Convert_## C ::in_T, lanczos_coeffs>,       \
-                       Subsample_Bicubic<Convert_## C ::in_T_uv, lanczos_coeffs> >), \
-                  Convert_##C::out_T##S) \
-    }
-
-#define LANCZOS_KERNEL_RAW(C) \
-    LANCZOS_KERNEL(C,)   \
-    LANCZOS_KERNEL(C,_uv)
-
-#define LANCZOS_KERNELS(C) \
-    LANCZOS_KERNEL_RAW(yuv420p_ ## C)     \
-    LANCZOS_KERNEL_RAW(nv12_ ## C)        \
-    LANCZOS_KERNEL_RAW(yuv444p_ ## C)     \
-    LANCZOS_KERNEL_RAW(p010le_ ## C)      \
-    LANCZOS_KERNEL_RAW(p016le_ ## C)      \
-    LANCZOS_KERNEL_RAW(yuv444p16le_ ## C)
-
-LANCZOS_KERNELS(yuv420p)
-LANCZOS_KERNELS(nv12)
-LANCZOS_KERNELS(yuv444p)
-LANCZOS_KERNELS(p010le)
-LANCZOS_KERNELS(p016le)
-LANCZOS_KERNELS(yuv444p16le)
-
-LANCZOS_KERNEL_RAW(bgr0_bgr0)
-LANCZOS_KERNEL_RAW(rgb0_rgb0)
-LANCZOS_KERNEL_RAW(bgr0_rgb0)
-LANCZOS_KERNEL_RAW(rgb0_bgr0)
+#define VARIANT(SRC, DST, CONV, SHIFT, PITCH, DITHER, NAME) \
+__global__ void Subsample_Bilinear_ ## NAME(cudaTextureObject_t tex, \
+                                    DST *dst, \
+                                    int dst_width, int dst_height, int dst_pitch, \
+                                    int src_width, int src_height, \
+                                    cudaTextureObject_t ditherTex) \
+{ \
+    Subsample_Bilinear<SRC, DST, CONV, PITCH, SHIFT, DITHER>(tex, dst, dst_width, dst_height, dst_pitch, \
+                                                             src_width, src_height, ditherTex); \
+}
+
+#define VARIANTSET2(SRC, DST, SHIFT, NAME) \
+    VARIANT(SRC,      DST,      add_conv_shift1_d, SHIFT, 1, (sizeof(DST) < sizeof(SRC)) ? sizeof(DST) : 0, NAME) \
+    VARIANT(SRC,      DST,      add_conv_shift1,   SHIFT, 1, 0, NAME ## _c) \
+    VARIANT(SRC,      DST,      add_conv_shift1,   SHIFT, 2, 0, NAME ## _p2) \
+    VARIANT(SRC ## 2, DST ## 2, add_conv_shift2,   SHIFT, 1, 0, NAME ## _2) \
+    VARIANT(SRC ## 2, DST,      add_conv_shift2_x, SHIFT, 1, 0, NAME ## _2_u) \
+    VARIANT(SRC ## 2, DST,      add_conv_shift2_y, SHIFT, 1, 0, NAME ## _2_v) \
+    VARIANT(SRC ## 4, DST ## 4, add_conv_shift4,   SHIFT, 1, 0, NAME ## _4)
+
+#define VARIANTSET(SRC, DST, SRCSIZE, DSTSIZE) \
+    VARIANTSET2(SRC, DST, (SRCSIZE - DSTSIZE), SRCSIZE ## _ ## DSTSIZE)
+
+// Straight no-conversion
+VARIANTSET(uchar,  uchar,  8,  8)
+VARIANTSET(ushort, ushort, 16, 16)
+
+// Conversion between 8- and 16-bit
+VARIANTSET(uchar,  ushort, 8,  16)
+VARIANTSET(ushort, uchar,  16, 8)
 
 }
Index: jellyfin-ffmpeg/libavfilter/vf_scale_cuda.h
===================================================================
--- jellyfin-ffmpeg.orig/libavfilter/vf_scale_cuda.h
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * This file is part of FFmpeg.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
- * DEALINGS IN THE SOFTWARE.
- */
-
-#ifndef AVFILTER_SCALE_CUDA_H
-#define AVFILTER_SCALE_CUDA_H
-
-#define SCALE_CUDA_PARAM_DEFAULT 999999.0f
-
-#endif
